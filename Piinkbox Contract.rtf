{\rtf1\ansi\ansicpg1252\cocoartf2636
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red79\green123\blue61;\red26\green26\blue41;\red172\green172\blue193;
\red70\green137\blue204;\red167\green197\blue152;\red212\green212\blue212;\red45\green175\blue118;\red14\green86\blue166;
\red31\green133\blue64;\red13\green102\blue149;\red140\green108\blue11;\red253\green181\blue13;\red237\green114\blue173;
\red194\green126\blue101;\red76\green167\blue134;\red187\green97\blue44;\red115\green123\blue132;\red219\green85\blue19;
}
{\*\expandedcolortbl;;\cssrgb\c37647\c54510\c30588;\cssrgb\c13333\c13725\c21176;\cssrgb\c72941\c73333\c80000;
\cssrgb\c33725\c61176\c83922;\cssrgb\c70980\c80784\c65882;\cssrgb\c86275\c86275\c86275;\cssrgb\c19608\c72941\c53725;\cssrgb\c3137\c42353\c70980;
\cssrgb\c12941\c58039\c31765;\cssrgb\c0\c47843\c65098;\cssrgb\c61961\c49412\c3137;\cssrgb\c100000\c75686\c2745;\cssrgb\c95294\c54118\c73333;
\cssrgb\c80784\c56863\c47059;\cssrgb\c35686\c70588\c59608;\cssrgb\c78824\c45882\c22353;\cssrgb\c52549\c55686\c58824;\cssrgb\c89412\c41961\c8235;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 /**\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  *Telegram https://www.t.me/piinkboxportal\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  *Website https://www.piinkbox.net\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  *Utility https://www.piinkbox.com\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2  *Twitter https://twitter.com/piink_box\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 */\cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 // SPDX-License-Identifier: MIT\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 pragma\cf4 \strokec4  \cf5 \strokec5 solidity\cf4 \strokec4  \cf6 \strokec6 0.8.17\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\
\cf5 \cb3 \strokec5 abstract\cf4 \strokec4  \cf5 \strokec5 contract\cf4 \strokec4  Context \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3     \cf5 \strokec5 function\cf4 \strokec4  _msgSender\cf7 \strokec7 ()\cf4 \strokec4  \cf8 \strokec8 internal\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf9 \strokec9 virtual\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 address\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf10 \strokec10 return\cf4 \strokec4  \cf11 \strokec11 msg\cf7 \strokec7 .\cf4 \strokec4 sender\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  _msgData\cf7 \strokec7 ()\cf4 \strokec4  \cf8 \strokec8 internal\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf9 \strokec9 virtual\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf11 \strokec11 bytes\cf4 \strokec4  \cf12 \strokec12 calldata\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf10 \strokec10 return\cf4 \strokec4  \cf11 \strokec11 msg\cf7 \strokec7 .\cf4 \strokec4 data\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 abstract\cf4 \strokec4  \cf5 \strokec5 contract\cf4 \strokec4  Ownable \cf5 \strokec5 is\cf4 \strokec4  Context \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3     \cf5 \strokec5 address\cf4 \strokec4  \cf8 \strokec8 private\cf4 \strokec4  _owner\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 event\cf4 \strokec4  OwnershipTransferred\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  \cf13 \strokec13 indexed\cf4 \strokec4  previousOwner\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 address\cf4 \strokec4  \cf13 \strokec13 indexed\cf4 \strokec4  newOwner\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\
\cb3     \cf14 \strokec14 constructor\cf7 \strokec7 ()\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         _transferOwnership\cf7 \strokec7 (\cf4 \strokec4 _msgSender\cf7 \strokec7 ());\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  owner\cf7 \strokec7 ()\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf9 \strokec9 virtual\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 address\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf10 \strokec10 return\cf4 \strokec4  _owner\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 modifier\cf4 \strokec4  onlyOwner\cf7 \strokec7 ()\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf11 \strokec11 require\cf7 \strokec7 (\cf4 \strokec4 owner\cf7 \strokec7 ()\cf4 \strokec4  \cf7 \strokec7 ==\cf4 \strokec4  _msgSender\cf7 \strokec7 (),\cf4 \strokec4  \cf15 \strokec15 "Ownable: caller is not the owner"\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3         _\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  renounceOwnership\cf7 \strokec7 ()\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  \cf9 \strokec9 virtual\cf4 \strokec4  onlyOwner \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         _transferOwnership\cf7 \strokec7 (\cf5 \strokec5 address\cf7 \strokec7 (\cf6 \strokec6 0\cf7 \strokec7 ));\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  transferOwnership\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  newOwner\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  \cf9 \strokec9 virtual\cf4 \strokec4  onlyOwner \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf11 \strokec11 require\cf7 \strokec7 (\cf4 \strokec4 newOwner \cf7 \strokec7 !=\cf4 \strokec4  \cf5 \strokec5 address\cf7 \strokec7 (\cf6 \strokec6 0\cf7 \strokec7 ),\cf4 \strokec4  \cf15 \strokec15 "Ownable: new owner is the zero address"\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3         _transferOwnership\cf7 \strokec7 (\cf4 \strokec4 newOwner\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  _transferOwnership\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  newOwner\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 internal\cf4 \strokec4  \cf9 \strokec9 virtual\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 address\cf4 \strokec4  oldOwner \cf7 \strokec7 =\cf4 \strokec4  _owner\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3         _owner \cf7 \strokec7 =\cf4 \strokec4  newOwner\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 emit\cf4 \strokec4  OwnershipTransferred\cf7 \strokec7 (\cf4 \strokec4 oldOwner\cf7 \strokec7 ,\cf4 \strokec4  newOwner\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 library\cf4 \strokec4  SafeMath \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3     \cf5 \strokec5 function\cf4 \strokec4  add\cf7 \strokec7 (\cf5 \strokec5 uint256\cf4 \strokec4  a\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint256\cf4 \strokec4  b\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 internal\cf4 \strokec4  \cf8 \strokec8 pure\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 uint256\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 uint256\cf4 \strokec4  c \cf7 \strokec7 =\cf4 \strokec4  a \cf7 \strokec7 +\cf4 \strokec4  b\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3         \cf11 \strokec11 require\cf7 \strokec7 (\cf4 \strokec4 c \cf7 \strokec7 >=\cf4 \strokec4  a\cf7 \strokec7 ,\cf4 \strokec4  \cf15 \strokec15 "SafeMath: addition overflow"\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\
\cb3         \cf10 \strokec10 return\cf4 \strokec4  c\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  sub\cf7 \strokec7 (\cf5 \strokec5 uint256\cf4 \strokec4  a\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint256\cf4 \strokec4  b\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 internal\cf4 \strokec4  \cf8 \strokec8 pure\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 uint256\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf10 \strokec10 return\cf4 \strokec4  sub\cf7 \strokec7 (\cf4 \strokec4 a\cf7 \strokec7 ,\cf4 \strokec4  b\cf7 \strokec7 ,\cf4 \strokec4  \cf15 \strokec15 "SafeMath: subtraction overflow"\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  sub\cf7 \strokec7 (\cf5 \strokec5 uint256\cf4 \strokec4  a\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint256\cf4 \strokec4  b\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 string\cf4 \strokec4  \cf12 \strokec12 memory\cf4 \strokec4  errorMessage\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 internal\cf4 \strokec4  \cf8 \strokec8 pure\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 uint256\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf11 \strokec11 require\cf7 \strokec7 (\cf4 \strokec4 b \cf7 \strokec7 <=\cf4 \strokec4  a\cf7 \strokec7 ,\cf4 \strokec4  errorMessage\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 uint256\cf4 \strokec4  c \cf7 \strokec7 =\cf4 \strokec4  a \cf7 \strokec7 -\cf4 \strokec4  b\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\
\cb3         \cf10 \strokec10 return\cf4 \strokec4  c\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  mul\cf7 \strokec7 (\cf5 \strokec5 uint256\cf4 \strokec4  a\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint256\cf4 \strokec4  b\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 internal\cf4 \strokec4  \cf8 \strokec8 pure\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 uint256\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf13 \strokec13 if\cf4 \strokec4  \cf7 \strokec7 (\cf4 \strokec4 a \cf7 \strokec7 ==\cf4 \strokec4  \cf6 \strokec6 0\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3             \cf10 \strokec10 return\cf4 \strokec4  \cf6 \strokec6 0\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3         \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3         \cf5 \strokec5 uint256\cf4 \strokec4  c \cf7 \strokec7 =\cf4 \strokec4  a \cf7 \strokec7 *\cf4 \strokec4  b\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3         \cf11 \strokec11 require\cf7 \strokec7 (\cf4 \strokec4 c \cf7 \strokec7 /\cf4 \strokec4  a \cf7 \strokec7 ==\cf4 \strokec4  b\cf7 \strokec7 ,\cf4 \strokec4  \cf15 \strokec15 "SafeMath: multiplication overflow"\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\
\cb3         \cf10 \strokec10 return\cf4 \strokec4  c\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  div\cf7 \strokec7 (\cf5 \strokec5 uint256\cf4 \strokec4  a\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint256\cf4 \strokec4  b\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 internal\cf4 \strokec4  \cf8 \strokec8 pure\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 uint256\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf10 \strokec10 return\cf4 \strokec4  div\cf7 \strokec7 (\cf4 \strokec4 a\cf7 \strokec7 ,\cf4 \strokec4  b\cf7 \strokec7 ,\cf4 \strokec4  \cf15 \strokec15 "SafeMath: division by zero"\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  div\cf7 \strokec7 (\cf5 \strokec5 uint256\cf4 \strokec4  a\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint256\cf4 \strokec4  b\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 string\cf4 \strokec4  \cf12 \strokec12 memory\cf4 \strokec4  errorMessage\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 internal\cf4 \strokec4  \cf8 \strokec8 pure\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 uint256\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf11 \strokec11 require\cf7 \strokec7 (\cf4 \strokec4 b \cf7 \strokec7 >\cf4 \strokec4  \cf6 \strokec6 0\cf7 \strokec7 ,\cf4 \strokec4  errorMessage\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 uint256\cf4 \strokec4  c \cf7 \strokec7 =\cf4 \strokec4  a \cf7 \strokec7 /\cf4 \strokec4  b\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3         \cf2 \strokec2 // assert(a == b * c + a % b); // There is no case in which this doesn't hold\cf4 \cb1 \strokec4 \
\
\cb3         \cf10 \strokec10 return\cf4 \strokec4  c\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  mod\cf7 \strokec7 (\cf5 \strokec5 uint256\cf4 \strokec4  a\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint256\cf4 \strokec4  b\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 internal\cf4 \strokec4  \cf8 \strokec8 pure\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 uint256\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf10 \strokec10 return\cf4 \strokec4  mod\cf7 \strokec7 (\cf4 \strokec4 a\cf7 \strokec7 ,\cf4 \strokec4  b\cf7 \strokec7 ,\cf4 \strokec4  \cf15 \strokec15 "SafeMath: modulo by zero"\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  mod\cf7 \strokec7 (\cf5 \strokec5 uint256\cf4 \strokec4  a\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint256\cf4 \strokec4  b\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 string\cf4 \strokec4  \cf12 \strokec12 memory\cf4 \strokec4  errorMessage\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 internal\cf4 \strokec4  \cf8 \strokec8 pure\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 uint256\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf11 \strokec11 require\cf7 \strokec7 (\cf4 \strokec4 b \cf7 \strokec7 !=\cf4 \strokec4  \cf6 \strokec6 0\cf7 \strokec7 ,\cf4 \strokec4  errorMessage\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3         \cf10 \strokec10 return\cf4 \strokec4  a \cf7 \strokec7 %\cf4 \strokec4  b\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 library\cf4 \strokec4  SafeMathInt \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3     \cf5 \strokec5 int256\cf4 \strokec4  \cf8 \strokec8 private\cf4 \strokec4  \cf5 \strokec5 constant\cf4 \strokec4  MIN_INT256 \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 int256\cf7 \strokec7 (\cf6 \strokec6 1\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 <<\cf4 \strokec4  \cf6 \strokec6 255\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 int256\cf4 \strokec4  \cf8 \strokec8 private\cf4 \strokec4  \cf5 \strokec5 constant\cf4 \strokec4  MAX_INT256 \cf7 \strokec7 =\cf4 \strokec4  \cf7 \strokec7 ~(\cf5 \strokec5 int256\cf7 \strokec7 (\cf6 \strokec6 1\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 <<\cf4 \strokec4  \cf6 \strokec6 255\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  mul\cf7 \strokec7 (\cf5 \strokec5 int256\cf4 \strokec4  a\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 int256\cf4 \strokec4  b\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 internal\cf4 \strokec4  \cf8 \strokec8 pure\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 int256\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 int256\cf4 \strokec4  c \cf7 \strokec7 =\cf4 \strokec4  a \cf7 \strokec7 *\cf4 \strokec4  b\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\
\cb3         \cf2 \strokec2 // Detect overflow when multiplying MIN_INT256 with -1\cf4 \cb1 \strokec4 \
\cb3         \cf11 \strokec11 require\cf7 \strokec7 (\cf4 \strokec4 c \cf7 \strokec7 !=\cf4 \strokec4  MIN_INT256 \cf7 \strokec7 ||\cf4 \strokec4  \cf7 \strokec7 (\cf4 \strokec4 a \cf7 \strokec7 &\cf4 \strokec4  MIN_INT256\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 !=\cf4 \strokec4  \cf7 \strokec7 (\cf4 \strokec4 b \cf7 \strokec7 &\cf4 \strokec4  MIN_INT256\cf7 \strokec7 ));\cf4 \cb1 \strokec4 \
\cb3         \cf11 \strokec11 require\cf7 \strokec7 ((\cf4 \strokec4 b \cf7 \strokec7 ==\cf4 \strokec4  \cf6 \strokec6 0\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 ||\cf4 \strokec4  \cf7 \strokec7 (\cf4 \strokec4 c \cf7 \strokec7 /\cf4 \strokec4  b \cf7 \strokec7 ==\cf4 \strokec4  a\cf7 \strokec7 ));\cf4 \cb1 \strokec4 \
\cb3         \cf10 \strokec10 return\cf4 \strokec4  c\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 function\cf4 \strokec4  div\cf7 \strokec7 (\cf5 \strokec5 int256\cf4 \strokec4  a\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 int256\cf4 \strokec4  b\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 internal\cf4 \strokec4  \cf8 \strokec8 pure\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 int256\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf2 \strokec2 // Prevent overflow when dividing MIN_INT256 by -1\cf4 \cb1 \strokec4 \
\cb3         \cf11 \strokec11 require\cf7 \strokec7 (\cf4 \strokec4 b \cf7 \strokec7 !=\cf4 \strokec4  \cf7 \strokec7 -\cf6 \strokec6 1\cf4 \strokec4  \cf7 \strokec7 ||\cf4 \strokec4  a \cf7 \strokec7 !=\cf4 \strokec4  MIN_INT256\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\
\cb3         \cf2 \strokec2 // Solidity already throws when dividing by 0.\cf4 \cb1 \strokec4 \
\cb3         \cf10 \strokec10 return\cf4 \strokec4  a \cf7 \strokec7 /\cf4 \strokec4  b\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 function\cf4 \strokec4  sub\cf7 \strokec7 (\cf5 \strokec5 int256\cf4 \strokec4  a\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 int256\cf4 \strokec4  b\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 internal\cf4 \strokec4  \cf8 \strokec8 pure\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 int256\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 int256\cf4 \strokec4  c \cf7 \strokec7 =\cf4 \strokec4  a \cf7 \strokec7 -\cf4 \strokec4  b\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3         \cf11 \strokec11 require\cf7 \strokec7 ((\cf4 \strokec4 b \cf7 \strokec7 >=\cf4 \strokec4  \cf6 \strokec6 0\cf4 \strokec4  \cf7 \strokec7 &&\cf4 \strokec4  c \cf7 \strokec7 <=\cf4 \strokec4  a\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 ||\cf4 \strokec4  \cf7 \strokec7 (\cf4 \strokec4 b \cf7 \strokec7 <\cf4 \strokec4  \cf6 \strokec6 0\cf4 \strokec4  \cf7 \strokec7 &&\cf4 \strokec4  c \cf7 \strokec7 >\cf4 \strokec4  a\cf7 \strokec7 ));\cf4 \cb1 \strokec4 \
\cb3         \cf10 \strokec10 return\cf4 \strokec4  c\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 function\cf4 \strokec4  add\cf7 \strokec7 (\cf5 \strokec5 int256\cf4 \strokec4  a\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 int256\cf4 \strokec4  b\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 internal\cf4 \strokec4  \cf8 \strokec8 pure\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 int256\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 int256\cf4 \strokec4  c \cf7 \strokec7 =\cf4 \strokec4  a \cf7 \strokec7 +\cf4 \strokec4  b\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3         \cf11 \strokec11 require\cf7 \strokec7 ((\cf4 \strokec4 b \cf7 \strokec7 >=\cf4 \strokec4  \cf6 \strokec6 0\cf4 \strokec4  \cf7 \strokec7 &&\cf4 \strokec4  c \cf7 \strokec7 >=\cf4 \strokec4  a\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 ||\cf4 \strokec4  \cf7 \strokec7 (\cf4 \strokec4 b \cf7 \strokec7 <\cf4 \strokec4  \cf6 \strokec6 0\cf4 \strokec4  \cf7 \strokec7 &&\cf4 \strokec4  c \cf7 \strokec7 <\cf4 \strokec4  a\cf7 \strokec7 ));\cf4 \cb1 \strokec4 \
\cb3         \cf10 \strokec10 return\cf4 \strokec4  c\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 function\cf4 \strokec4  abs\cf7 \strokec7 (\cf5 \strokec5 int256\cf4 \strokec4  a\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 internal\cf4 \strokec4  \cf8 \strokec8 pure\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 int256\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf11 \strokec11 require\cf7 \strokec7 (\cf4 \strokec4 a \cf7 \strokec7 !=\cf4 \strokec4  MIN_INT256\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3         \cf10 \strokec10 return\cf4 \strokec4  a \cf7 \strokec7 <\cf4 \strokec4  \cf6 \strokec6 0\cf4 \strokec4  \cf7 \strokec7 ?\cf4 \strokec4  \cf7 \strokec7 -\cf4 \strokec4 a \cf7 \strokec7 :\cf4 \strokec4  a\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 function\cf4 \strokec4  toUint256Safe\cf7 \strokec7 (\cf5 \strokec5 int256\cf4 \strokec4  a\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 internal\cf4 \strokec4  \cf8 \strokec8 pure\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 uint256\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf11 \strokec11 require\cf7 \strokec7 (\cf4 \strokec4 a \cf7 \strokec7 >=\cf4 \strokec4  \cf6 \strokec6 0\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3         \cf10 \strokec10 return\cf4 \strokec4  \cf5 \strokec5 uint256\cf7 \strokec7 (\cf4 \strokec4 a\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 library\cf4 \strokec4  SafeMathUint \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3     \cf5 \strokec5 function\cf4 \strokec4  toInt256Safe\cf7 \strokec7 (\cf5 \strokec5 uint256\cf4 \strokec4  a\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 internal\cf4 \strokec4  \cf8 \strokec8 pure\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 int256\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 int256\cf4 \strokec4  b \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 int256\cf7 \strokec7 (\cf4 \strokec4 a\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3         \cf11 \strokec11 require\cf7 \strokec7 (\cf4 \strokec4 b \cf7 \strokec7 >=\cf4 \strokec4  \cf6 \strokec6 0\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3         \cf10 \strokec10 return\cf4 \strokec4  b\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 library\cf4 \strokec4  IterableMapping \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3     \cf5 \strokec5 struct\cf4 \strokec4  Map \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 address\cf7 \strokec7 []\cf4 \strokec4  keys\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 mapping\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  => \cf5 \strokec5 uint\cf7 \strokec7 )\cf4 \strokec4  values\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 mapping\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  => \cf5 \strokec5 uint\cf7 \strokec7 )\cf4 \strokec4  indexOf\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 mapping\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  => \cf5 \strokec5 bool\cf7 \strokec7 )\cf4 \strokec4  inserted\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  get\cf7 \strokec7 (\cf4 \strokec4 Map \cf12 \strokec12 storage\cf4 \strokec4  map\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 address\cf4 \strokec4  key\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 uint\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf10 \strokec10 return\cf4 \strokec4  map\cf7 \strokec7 .\cf4 \strokec4 values\cf7 \strokec7 [\cf4 \strokec4 key\cf7 \strokec7 ];\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  getIndexOfKey\cf7 \strokec7 (\cf4 \strokec4 Map \cf12 \strokec12 storage\cf4 \strokec4  map\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 address\cf4 \strokec4  key\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 int\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf13 \strokec13 if\cf7 \strokec7 (!\cf4 \strokec4 map\cf7 \strokec7 .\cf4 \strokec4 inserted\cf7 \strokec7 [\cf4 \strokec4 key\cf7 \strokec7 ])\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3             \cf10 \strokec10 return\cf4 \strokec4  \cf7 \strokec7 -\cf6 \strokec6 1\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3         \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\cb3         \cf10 \strokec10 return\cf4 \strokec4  \cf5 \strokec5 int\cf7 \strokec7 (\cf4 \strokec4 map\cf7 \strokec7 .\cf4 \strokec4 indexOf\cf7 \strokec7 [\cf4 \strokec4 key\cf7 \strokec7 ]);\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  getKeyAtIndex\cf7 \strokec7 (\cf4 \strokec4 Map \cf12 \strokec12 storage\cf4 \strokec4  map\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint\cf4 \strokec4  index\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 address\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf10 \strokec10 return\cf4 \strokec4  map\cf7 \strokec7 .\cf4 \strokec4 keys\cf7 \strokec7 [\cf4 \strokec4 index\cf7 \strokec7 ];\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  size\cf7 \strokec7 (\cf4 \strokec4 Map \cf12 \strokec12 storage\cf4 \strokec4  map\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 uint\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf10 \strokec10 return\cf4 \strokec4  map\cf7 \strokec7 .\cf4 \strokec4 keys\cf7 \strokec7 .\cf4 \strokec4 length\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  set\cf7 \strokec7 (\cf4 \strokec4 Map \cf12 \strokec12 storage\cf4 \strokec4  map\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 address\cf4 \strokec4  key\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint\cf4 \strokec4  val\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf13 \strokec13 if\cf4 \strokec4  \cf7 \strokec7 (\cf4 \strokec4 map\cf7 \strokec7 .\cf4 \strokec4 inserted\cf7 \strokec7 [\cf4 \strokec4 key\cf7 \strokec7 ])\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3             map\cf7 \strokec7 .\cf4 \strokec4 values\cf7 \strokec7 [\cf4 \strokec4 key\cf7 \strokec7 ]\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  val\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3         \cf7 \strokec7 \}\cf4 \strokec4  \cf13 \strokec13 else\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3             map\cf7 \strokec7 .\cf4 \strokec4 inserted\cf7 \strokec7 [\cf4 \strokec4 key\cf7 \strokec7 ]\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 true\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3             map\cf7 \strokec7 .\cf4 \strokec4 values\cf7 \strokec7 [\cf4 \strokec4 key\cf7 \strokec7 ]\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  val\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3             map\cf7 \strokec7 .\cf4 \strokec4 indexOf\cf7 \strokec7 [\cf4 \strokec4 key\cf7 \strokec7 ]\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  map\cf7 \strokec7 .\cf4 \strokec4 keys\cf7 \strokec7 .\cf4 \strokec4 length\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3             map\cf7 \strokec7 .\cf4 \strokec4 keys\cf7 \strokec7 .\cf4 \strokec4 push\cf7 \strokec7 (\cf4 \strokec4 key\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3         \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  remove\cf7 \strokec7 (\cf4 \strokec4 Map \cf12 \strokec12 storage\cf4 \strokec4  map\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 address\cf4 \strokec4  key\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf13 \strokec13 if\cf4 \strokec4  \cf7 \strokec7 (!\cf4 \strokec4 map\cf7 \strokec7 .\cf4 \strokec4 inserted\cf7 \strokec7 [\cf4 \strokec4 key\cf7 \strokec7 ])\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3             \cf10 \strokec10 return\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3         \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3         delete map\cf7 \strokec7 .\cf4 \strokec4 inserted\cf7 \strokec7 [\cf4 \strokec4 key\cf7 \strokec7 ];\cf4 \cb1 \strokec4 \
\cb3         delete map\cf7 \strokec7 .\cf4 \strokec4 values\cf7 \strokec7 [\cf4 \strokec4 key\cf7 \strokec7 ];\cf4 \cb1 \strokec4 \
\
\cb3         \cf5 \strokec5 uint\cf4 \strokec4  index \cf7 \strokec7 =\cf4 \strokec4  map\cf7 \strokec7 .\cf4 \strokec4 indexOf\cf7 \strokec7 [\cf4 \strokec4 key\cf7 \strokec7 ];\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 uint\cf4 \strokec4  lastIndex \cf7 \strokec7 =\cf4 \strokec4  map\cf7 \strokec7 .\cf4 \strokec4 keys\cf7 \strokec7 .\cf4 \strokec4 length \cf7 \strokec7 -\cf4 \strokec4  \cf6 \strokec6 1\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 address\cf4 \strokec4  lastKey \cf7 \strokec7 =\cf4 \strokec4  map\cf7 \strokec7 .\cf4 \strokec4 keys\cf7 \strokec7 [\cf4 \strokec4 lastIndex\cf7 \strokec7 ];\cf4 \cb1 \strokec4 \
\
\cb3         map\cf7 \strokec7 .\cf4 \strokec4 indexOf\cf7 \strokec7 [\cf4 \strokec4 lastKey\cf7 \strokec7 ]\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  index\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3         delete map\cf7 \strokec7 .\cf4 \strokec4 indexOf\cf7 \strokec7 [\cf4 \strokec4 key\cf7 \strokec7 ];\cf4 \cb1 \strokec4 \
\
\cb3         map\cf7 \strokec7 .\cf4 \strokec4 keys\cf7 \strokec7 [\cf4 \strokec4 index\cf7 \strokec7 ]\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  lastKey\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3         map\cf7 \strokec7 .\cf4 \strokec4 keys\cf7 \strokec7 .\cf4 \strokec4 pop\cf7 \strokec7 ();\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 interface IUniswapV2Factory \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 event\cf4 \strokec4  PairCreated\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  \cf13 \strokec13 indexed\cf4 \strokec4  token0\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 address\cf4 \strokec4  \cf13 \strokec13 indexed\cf4 \strokec4  token1\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 address\cf4 \strokec4  pair\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  feeTo\cf7 \strokec7 ()\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 address\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 function\cf4 \strokec4  feeToSetter\cf7 \strokec7 ()\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 address\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 function\cf4 \strokec4  getPair\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  tokenA\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 address\cf4 \strokec4  tokenB\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  pair\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 function\cf4 \strokec4  allPairs\cf7 \strokec7 (\cf5 \strokec5 uint\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  pair\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 function\cf4 \strokec4  allPairsLength\cf7 \strokec7 ()\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 uint\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 function\cf4 \strokec4  createPair\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  tokenA\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 address\cf4 \strokec4  tokenB\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  pair\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 function\cf4 \strokec4  setFeeTo\cf7 \strokec7 (\cf5 \strokec5 address\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 external\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 function\cf4 \strokec4  setFeeToSetter\cf7 \strokec7 (\cf5 \strokec5 address\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 external\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 interface IUniswapV2Pair \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 event\cf4 \strokec4  Approval\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  \cf13 \strokec13 indexed\cf4 \strokec4  owner\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 address\cf4 \strokec4  \cf13 \strokec13 indexed\cf4 \strokec4  spender\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint\cf4 \strokec4  value\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 event\cf4 \strokec4  Transfer\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  \cf13 \strokec13 indexed\cf4 \strokec4  from\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 address\cf4 \strokec4  \cf13 \strokec13 indexed\cf4 \strokec4  to\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint\cf4 \strokec4  value\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  name\cf7 \strokec7 ()\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf8 \strokec8 pure\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 string\cf4 \strokec4  \cf12 \strokec12 memory\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 function\cf4 \strokec4  symbol\cf7 \strokec7 ()\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf8 \strokec8 pure\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 string\cf4 \strokec4  \cf12 \strokec12 memory\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 function\cf4 \strokec4  decimals\cf7 \strokec7 ()\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf8 \strokec8 pure\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 uint8\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 function\cf4 \strokec4  totalSupply\cf7 \strokec7 ()\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 uint\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 function\cf4 \strokec4  balanceOf\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  owner\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 uint\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 function\cf4 \strokec4  allowance\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  owner\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 address\cf4 \strokec4  spender\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 uint\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  approve\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  spender\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint\cf4 \strokec4  value\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 bool\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 function\cf4 \strokec4  transfer\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  to\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint\cf4 \strokec4  value\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 bool\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 function\cf4 \strokec4  transferFrom\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  from\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 address\cf4 \strokec4  to\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint\cf4 \strokec4  value\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 bool\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  DOMAIN_SEPARATOR\cf7 \strokec7 ()\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 bytes32\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 function\cf4 \strokec4  PERMIT_TYPEHASH\cf7 \strokec7 ()\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf8 \strokec8 pure\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 bytes32\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 function\cf4 \strokec4  nonces\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  owner\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 uint\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  permit\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  owner\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 address\cf4 \strokec4  spender\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint\cf4 \strokec4  value\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint\cf4 \strokec4  deadline\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint8\cf4 \strokec4  v\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 bytes32\cf4 \strokec4  r\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 bytes32\cf4 \strokec4  s\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 external\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 event\cf4 \strokec4  Mint\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  \cf13 \strokec13 indexed\cf4 \strokec4  sender\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint\cf4 \strokec4  amount0\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint\cf4 \strokec4  amount1\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 event\cf4 \strokec4  Burn\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  \cf13 \strokec13 indexed\cf4 \strokec4  sender\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint\cf4 \strokec4  amount0\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint\cf4 \strokec4  amount1\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 address\cf4 \strokec4  \cf13 \strokec13 indexed\cf4 \strokec4  to\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 event\cf4 \strokec4  Swap\cf7 \strokec7 (\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 address\cf4 \strokec4  \cf13 \strokec13 indexed\cf4 \strokec4  sender\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 uint\cf4 \strokec4  amount0In\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 uint\cf4 \strokec4  amount1In\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 uint\cf4 \strokec4  amount0Out\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 uint\cf4 \strokec4  amount1Out\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 address\cf4 \strokec4  \cf13 \strokec13 indexed\cf4 \strokec4  to\cb1 \
\cb3     \cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 event\cf4 \strokec4  Sync\cf7 \strokec7 (\cf5 \strokec5 uint112\cf4 \strokec4  reserve0\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint112\cf4 \strokec4  reserve1\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  MINIMUM_LIQUIDITY\cf7 \strokec7 ()\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf8 \strokec8 pure\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 uint\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 function\cf4 \strokec4  factory\cf7 \strokec7 ()\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 address\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 function\cf4 \strokec4  token0\cf7 \strokec7 ()\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 address\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 function\cf4 \strokec4  token1\cf7 \strokec7 ()\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 address\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 function\cf4 \strokec4  getReserves\cf7 \strokec7 ()\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 uint112\cf4 \strokec4  reserve0\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint112\cf4 \strokec4  reserve1\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint32\cf4 \strokec4  blockTimestampLast\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 function\cf4 \strokec4  price0CumulativeLast\cf7 \strokec7 ()\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 uint\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 function\cf4 \strokec4  price1CumulativeLast\cf7 \strokec7 ()\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 uint\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 function\cf4 \strokec4  kLast\cf7 \strokec7 ()\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 uint\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  mint\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  to\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 uint\cf4 \strokec4  liquidity\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 function\cf4 \strokec4  burn\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  to\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 uint\cf4 \strokec4  amount0\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint\cf4 \strokec4  amount1\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 function\cf4 \strokec4  swap\cf7 \strokec7 (\cf5 \strokec5 uint\cf4 \strokec4  amount0Out\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint\cf4 \strokec4  amount1Out\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 address\cf4 \strokec4  to\cf7 \strokec7 ,\cf4 \strokec4  \cf11 \strokec11 bytes\cf4 \strokec4  \cf12 \strokec12 calldata\cf4 \strokec4  data\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 external\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 function\cf4 \strokec4  skim\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  to\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 external\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 function\cf4 \strokec4  sync\cf7 \strokec7 ()\cf4 \strokec4  \cf8 \strokec8 external\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  initialize\cf7 \strokec7 (\cf5 \strokec5 address\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 address\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 external\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 interface IUniswapV2Router01 \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 function\cf4 \strokec4  factory\cf7 \strokec7 ()\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf8 \strokec8 pure\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 address\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 function\cf4 \strokec4  WETH\cf7 \strokec7 ()\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf8 \strokec8 pure\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 address\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  addLiquidity\cf7 \strokec7 (\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 address\cf4 \strokec4  tokenA\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 address\cf4 \strokec4  tokenB\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 uint\cf4 \strokec4  amountADesired\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 uint\cf4 \strokec4  amountBDesired\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 uint\cf4 \strokec4  amountAMin\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 uint\cf4 \strokec4  amountBMin\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 address\cf4 \strokec4  to\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 uint\cf4 \strokec4  deadline\cb1 \
\cb3     \cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 uint\cf4 \strokec4  amountA\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint\cf4 \strokec4  amountB\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint\cf4 \strokec4  liquidity\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 function\cf4 \strokec4  addLiquidityETH\cf7 \strokec7 (\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 address\cf4 \strokec4  token\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 uint\cf4 \strokec4  amountTokenDesired\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 uint\cf4 \strokec4  amountTokenMin\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 uint\cf4 \strokec4  amountETHMin\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 address\cf4 \strokec4  to\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 uint\cf4 \strokec4  deadline\cb1 \
\cb3     \cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf8 \strokec8 payable\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 uint\cf4 \strokec4  amountToken\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint\cf4 \strokec4  amountETH\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint\cf4 \strokec4  liquidity\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 function\cf4 \strokec4  removeLiquidity\cf7 \strokec7 (\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 address\cf4 \strokec4  tokenA\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 address\cf4 \strokec4  tokenB\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 uint\cf4 \strokec4  liquidity\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 uint\cf4 \strokec4  amountAMin\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 uint\cf4 \strokec4  amountBMin\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 address\cf4 \strokec4  to\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 uint\cf4 \strokec4  deadline\cb1 \
\cb3     \cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 uint\cf4 \strokec4  amountA\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint\cf4 \strokec4  amountB\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 function\cf4 \strokec4  removeLiquidityETH\cf7 \strokec7 (\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 address\cf4 \strokec4  token\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 uint\cf4 \strokec4  liquidity\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 uint\cf4 \strokec4  amountTokenMin\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 uint\cf4 \strokec4  amountETHMin\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 address\cf4 \strokec4  to\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 uint\cf4 \strokec4  deadline\cb1 \
\cb3     \cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 uint\cf4 \strokec4  amountToken\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint\cf4 \strokec4  amountETH\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 function\cf4 \strokec4  removeLiquidityWithPermit\cf7 \strokec7 (\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 address\cf4 \strokec4  tokenA\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 address\cf4 \strokec4  tokenB\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 uint\cf4 \strokec4  liquidity\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 uint\cf4 \strokec4  amountAMin\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 uint\cf4 \strokec4  amountBMin\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 address\cf4 \strokec4  to\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 uint\cf4 \strokec4  deadline\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 bool\cf4 \strokec4  approveMax\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint8\cf4 \strokec4  v\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 bytes32\cf4 \strokec4  r\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 bytes32\cf4 \strokec4  s\cb1 \
\cb3     \cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 uint\cf4 \strokec4  amountA\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint\cf4 \strokec4  amountB\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 function\cf4 \strokec4  removeLiquidityETHWithPermit\cf7 \strokec7 (\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 address\cf4 \strokec4  token\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 uint\cf4 \strokec4  liquidity\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 uint\cf4 \strokec4  amountTokenMin\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 uint\cf4 \strokec4  amountETHMin\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 address\cf4 \strokec4  to\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 uint\cf4 \strokec4  deadline\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 bool\cf4 \strokec4  approveMax\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint8\cf4 \strokec4  v\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 bytes32\cf4 \strokec4  r\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 bytes32\cf4 \strokec4  s\cb1 \
\cb3     \cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 uint\cf4 \strokec4  amountToken\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint\cf4 \strokec4  amountETH\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 function\cf4 \strokec4  swapExactTokensForTokens\cf7 \strokec7 (\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 uint\cf4 \strokec4  amountIn\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 uint\cf4 \strokec4  amountOutMin\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 address\cf7 \strokec7 []\cf4 \strokec4  \cf12 \strokec12 calldata\cf4 \strokec4  path\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 address\cf4 \strokec4  to\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 uint\cf4 \strokec4  deadline\cb1 \
\cb3     \cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 uint\cf7 \strokec7 []\cf4 \strokec4  \cf12 \strokec12 memory\cf4 \strokec4  amounts\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 function\cf4 \strokec4  swapTokensForExactTokens\cf7 \strokec7 (\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 uint\cf4 \strokec4  amountOut\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 uint\cf4 \strokec4  amountInMax\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 address\cf7 \strokec7 []\cf4 \strokec4  \cf12 \strokec12 calldata\cf4 \strokec4  path\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 address\cf4 \strokec4  to\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 uint\cf4 \strokec4  deadline\cb1 \
\cb3     \cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 uint\cf7 \strokec7 []\cf4 \strokec4  \cf12 \strokec12 memory\cf4 \strokec4  amounts\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 function\cf4 \strokec4  swapExactETHForTokens\cf7 \strokec7 (\cf5 \strokec5 uint\cf4 \strokec4  amountOutMin\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 address\cf7 \strokec7 []\cf4 \strokec4  \cf12 \strokec12 calldata\cf4 \strokec4  path\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 address\cf4 \strokec4  to\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint\cf4 \strokec4  deadline\cf7 \strokec7 )\cf4 \cb1 \strokec4 \
\cb3         \cf8 \strokec8 external\cf4 \cb1 \strokec4 \
\cb3         \cf8 \strokec8 payable\cf4 \cb1 \strokec4 \
\cb3         \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 uint\cf7 \strokec7 []\cf4 \strokec4  \cf12 \strokec12 memory\cf4 \strokec4  amounts\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 function\cf4 \strokec4  swapTokensForExactETH\cf7 \strokec7 (\cf5 \strokec5 uint\cf4 \strokec4  amountOut\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint\cf4 \strokec4  amountInMax\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 address\cf7 \strokec7 []\cf4 \strokec4  \cf12 \strokec12 calldata\cf4 \strokec4  path\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 address\cf4 \strokec4  to\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint\cf4 \strokec4  deadline\cf7 \strokec7 )\cf4 \cb1 \strokec4 \
\cb3         \cf8 \strokec8 external\cf4 \cb1 \strokec4 \
\cb3         \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 uint\cf7 \strokec7 []\cf4 \strokec4  \cf12 \strokec12 memory\cf4 \strokec4  amounts\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 function\cf4 \strokec4  swapExactTokensForETH\cf7 \strokec7 (\cf5 \strokec5 uint\cf4 \strokec4  amountIn\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint\cf4 \strokec4  amountOutMin\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 address\cf7 \strokec7 []\cf4 \strokec4  \cf12 \strokec12 calldata\cf4 \strokec4  path\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 address\cf4 \strokec4  to\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint\cf4 \strokec4  deadline\cf7 \strokec7 )\cf4 \cb1 \strokec4 \
\cb3         \cf8 \strokec8 external\cf4 \cb1 \strokec4 \
\cb3         \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 uint\cf7 \strokec7 []\cf4 \strokec4  \cf12 \strokec12 memory\cf4 \strokec4  amounts\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 function\cf4 \strokec4  swapETHForExactTokens\cf7 \strokec7 (\cf5 \strokec5 uint\cf4 \strokec4  amountOut\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 address\cf7 \strokec7 []\cf4 \strokec4  \cf12 \strokec12 calldata\cf4 \strokec4  path\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 address\cf4 \strokec4  to\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint\cf4 \strokec4  deadline\cf7 \strokec7 )\cf4 \cb1 \strokec4 \
\cb3         \cf8 \strokec8 external\cf4 \cb1 \strokec4 \
\cb3         \cf8 \strokec8 payable\cf4 \cb1 \strokec4 \
\cb3         \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 uint\cf7 \strokec7 []\cf4 \strokec4  \cf12 \strokec12 memory\cf4 \strokec4  amounts\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  quote\cf7 \strokec7 (\cf5 \strokec5 uint\cf4 \strokec4  amountA\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint\cf4 \strokec4  reserveA\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint\cf4 \strokec4  reserveB\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf8 \strokec8 pure\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 uint\cf4 \strokec4  amountB\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 function\cf4 \strokec4  getAmountOut\cf7 \strokec7 (\cf5 \strokec5 uint\cf4 \strokec4  amountIn\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint\cf4 \strokec4  reserveIn\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint\cf4 \strokec4  reserveOut\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf8 \strokec8 pure\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 uint\cf4 \strokec4  amountOut\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 function\cf4 \strokec4  getAmountIn\cf7 \strokec7 (\cf5 \strokec5 uint\cf4 \strokec4  amountOut\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint\cf4 \strokec4  reserveIn\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint\cf4 \strokec4  reserveOut\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf8 \strokec8 pure\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 uint\cf4 \strokec4  amountIn\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 function\cf4 \strokec4  getAmountsOut\cf7 \strokec7 (\cf5 \strokec5 uint\cf4 \strokec4  amountIn\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 address\cf7 \strokec7 []\cf4 \strokec4  \cf12 \strokec12 calldata\cf4 \strokec4  path\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 uint\cf7 \strokec7 []\cf4 \strokec4  \cf12 \strokec12 memory\cf4 \strokec4  amounts\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 function\cf4 \strokec4  getAmountsIn\cf7 \strokec7 (\cf5 \strokec5 uint\cf4 \strokec4  amountOut\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 address\cf7 \strokec7 []\cf4 \strokec4  \cf12 \strokec12 calldata\cf4 \strokec4  path\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 uint\cf7 \strokec7 []\cf4 \strokec4  \cf12 \strokec12 memory\cf4 \strokec4  amounts\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 interface IUniswapV2Router02 \cf5 \strokec5 is\cf4 \strokec4  IUniswapV2Router01 \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 function\cf4 \strokec4  removeLiquidityETHSupportingFeeOnTransferTokens\cf7 \strokec7 (\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 address\cf4 \strokec4  token\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 uint\cf4 \strokec4  liquidity\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 uint\cf4 \strokec4  amountTokenMin\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 uint\cf4 \strokec4  amountETHMin\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 address\cf4 \strokec4  to\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 uint\cf4 \strokec4  deadline\cb1 \
\cb3     \cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 uint\cf4 \strokec4  amountETH\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 function\cf4 \strokec4  removeLiquidityETHWithPermitSupportingFeeOnTransferTokens\cf7 \strokec7 (\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 address\cf4 \strokec4  token\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 uint\cf4 \strokec4  liquidity\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 uint\cf4 \strokec4  amountTokenMin\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 uint\cf4 \strokec4  amountETHMin\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 address\cf4 \strokec4  to\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 uint\cf4 \strokec4  deadline\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 bool\cf4 \strokec4  approveMax\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint8\cf4 \strokec4  v\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 bytes32\cf4 \strokec4  r\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 bytes32\cf4 \strokec4  s\cb1 \
\cb3     \cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 uint\cf4 \strokec4  amountETH\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  swapExactTokensForTokensSupportingFeeOnTransferTokens\cf7 \strokec7 (\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 uint\cf4 \strokec4  amountIn\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 uint\cf4 \strokec4  amountOutMin\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 address\cf7 \strokec7 []\cf4 \strokec4  \cf12 \strokec12 calldata\cf4 \strokec4  path\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 address\cf4 \strokec4  to\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 uint\cf4 \strokec4  deadline\cb1 \
\cb3     \cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 external\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 function\cf4 \strokec4  swapExactETHForTokensSupportingFeeOnTransferTokens\cf7 \strokec7 (\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 uint\cf4 \strokec4  amountOutMin\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 address\cf7 \strokec7 []\cf4 \strokec4  \cf12 \strokec12 calldata\cf4 \strokec4  path\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 address\cf4 \strokec4  to\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 uint\cf4 \strokec4  deadline\cb1 \
\cb3     \cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf8 \strokec8 payable\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 function\cf4 \strokec4  swapExactTokensForETHSupportingFeeOnTransferTokens\cf7 \strokec7 (\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 uint\cf4 \strokec4  amountIn\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 uint\cf4 \strokec4  amountOutMin\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 address\cf7 \strokec7 []\cf4 \strokec4  \cf12 \strokec12 calldata\cf4 \strokec4  path\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 address\cf4 \strokec4  to\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 uint\cf4 \strokec4  deadline\cb1 \
\cb3     \cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 external\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 interface IERC20 \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 function\cf4 \strokec4  totalSupply\cf7 \strokec7 ()\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 uint256\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 function\cf4 \strokec4  balanceOf\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  who\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 uint256\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 function\cf4 \strokec4  allowance\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  owner\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 address\cf4 \strokec4  spender\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 uint256\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 function\cf4 \strokec4  transfer\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  to\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint256\cf4 \strokec4  value\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 bool\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 function\cf4 \strokec4  approve\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  spender\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint256\cf4 \strokec4  value\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 bool\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 function\cf4 \strokec4  transferFrom\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  from\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 address\cf4 \strokec4  to\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint256\cf4 \strokec4  value\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 bool\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 event\cf4 \strokec4  Transfer\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  \cf13 \strokec13 indexed\cf4 \strokec4  from\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 address\cf4 \strokec4  \cf13 \strokec13 indexed\cf4 \strokec4  to\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint256\cf4 \strokec4  value\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 event\cf4 \strokec4  Approval\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  \cf13 \strokec13 indexed\cf4 \strokec4  owner\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 address\cf4 \strokec4  \cf13 \strokec13 indexed\cf4 \strokec4  spender\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint256\cf4 \strokec4  value\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 library\cf4 \strokec4  Address \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3     \cf5 \strokec5 function\cf4 \strokec4  isContract\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  account\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 internal\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 bool\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf2 \strokec2 // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\cf4 \cb1 \strokec4 \
\cb3         \cf2 \strokec2 // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\cf4 \cb1 \strokec4 \
\cb3         \cf2 \strokec2 // for accounts without code, i.e. `keccak256('')`\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 bytes32\cf4 \strokec4  codehash\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 bytes32\cf4 \strokec4  accountHash \cf7 \strokec7 =\cf4 \strokec4  \cf16 \strokec16 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3         \cf2 \strokec2 // solhint-disable-next-line no-inline-assembly\cf4 \cb1 \strokec4 \
\cb3         assembly \cf7 \strokec7 \{\cf4 \strokec4  codehash := extcodehash\cf7 \strokec7 (\cf4 \strokec4 account\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\cb3         \cf10 \strokec10 return\cf4 \strokec4  \cf7 \strokec7 (\cf4 \strokec4 codehash \cf7 \strokec7 !=\cf4 \strokec4  accountHash \cf7 \strokec7 &&\cf4 \strokec4  codehash \cf7 \strokec7 !=\cf4 \strokec4  \cf16 \strokec16 0x0\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  sendValue\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  \cf8 \strokec8 payable\cf4 \strokec4  recipient\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint256\cf4 \strokec4  amount\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 internal\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf11 \strokec11 require\cf7 \strokec7 (\cf5 \strokec5 address\cf7 \strokec7 (\cf9 \strokec9 this\cf7 \strokec7 ).\cf4 \strokec4 balance \cf7 \strokec7 >=\cf4 \strokec4  amount\cf7 \strokec7 ,\cf4 \strokec4  \cf15 \strokec15 "Address: insufficient balance"\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\
\cb3         \cf2 \strokec2 // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\cf4 \cb1 \strokec4 \
\cb3         \cf7 \strokec7 (\cf5 \strokec5 bool\cf4 \strokec4  success\cf7 \strokec7 ,\cf4 \strokec4  \cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  recipient\cf7 \strokec7 .\cf4 \strokec4 call\cf7 \strokec7 \{\cf4 \strokec4  value\cf7 \strokec7 :\cf4 \strokec4  amount \cf7 \strokec7 \}(\cf15 \strokec15 ""\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3         \cf11 \strokec11 require\cf7 \strokec7 (\cf4 \strokec4 success\cf7 \strokec7 ,\cf4 \strokec4  \cf15 \strokec15 "Address: unable to send value, recipient may have reverted"\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  functionCall\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  target\cf7 \strokec7 ,\cf4 \strokec4  \cf11 \strokec11 bytes\cf4 \strokec4  \cf12 \strokec12 memory\cf4 \strokec4  data\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 internal\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf11 \strokec11 bytes\cf4 \strokec4  \cf12 \strokec12 memory\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3       \cf10 \strokec10 return\cf4 \strokec4  functionCall\cf7 \strokec7 (\cf4 \strokec4 target\cf7 \strokec7 ,\cf4 \strokec4  data\cf7 \strokec7 ,\cf4 \strokec4  \cf15 \strokec15 "Address: low-level call failed"\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  functionCall\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  target\cf7 \strokec7 ,\cf4 \strokec4  \cf11 \strokec11 bytes\cf4 \strokec4  \cf12 \strokec12 memory\cf4 \strokec4  data\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 string\cf4 \strokec4  \cf12 \strokec12 memory\cf4 \strokec4  errorMessage\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 internal\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf11 \strokec11 bytes\cf4 \strokec4  \cf12 \strokec12 memory\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf10 \strokec10 return\cf4 \strokec4  _functionCallWithValue\cf7 \strokec7 (\cf4 \strokec4 target\cf7 \strokec7 ,\cf4 \strokec4  data\cf7 \strokec7 ,\cf4 \strokec4  \cf6 \strokec6 0\cf7 \strokec7 ,\cf4 \strokec4  errorMessage\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  functionCallWithValue\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  target\cf7 \strokec7 ,\cf4 \strokec4  \cf11 \strokec11 bytes\cf4 \strokec4  \cf12 \strokec12 memory\cf4 \strokec4  data\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint256\cf4 \strokec4  value\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 internal\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf11 \strokec11 bytes\cf4 \strokec4  \cf12 \strokec12 memory\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf10 \strokec10 return\cf4 \strokec4  functionCallWithValue\cf7 \strokec7 (\cf4 \strokec4 target\cf7 \strokec7 ,\cf4 \strokec4  data\cf7 \strokec7 ,\cf4 \strokec4  value\cf7 \strokec7 ,\cf4 \strokec4  \cf15 \strokec15 "Address: low-level call with value failed"\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  functionCallWithValue\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  target\cf7 \strokec7 ,\cf4 \strokec4  \cf11 \strokec11 bytes\cf4 \strokec4  \cf12 \strokec12 memory\cf4 \strokec4  data\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint256\cf4 \strokec4  value\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 string\cf4 \strokec4  \cf12 \strokec12 memory\cf4 \strokec4  errorMessage\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 internal\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf11 \strokec11 bytes\cf4 \strokec4  \cf12 \strokec12 memory\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf11 \strokec11 require\cf7 \strokec7 (\cf5 \strokec5 address\cf7 \strokec7 (\cf9 \strokec9 this\cf7 \strokec7 ).\cf4 \strokec4 balance \cf7 \strokec7 >=\cf4 \strokec4  value\cf7 \strokec7 ,\cf4 \strokec4  \cf15 \strokec15 "Address: insufficient balance for call"\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3         \cf10 \strokec10 return\cf4 \strokec4  _functionCallWithValue\cf7 \strokec7 (\cf4 \strokec4 target\cf7 \strokec7 ,\cf4 \strokec4  data\cf7 \strokec7 ,\cf4 \strokec4  value\cf7 \strokec7 ,\cf4 \strokec4  errorMessage\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  _functionCallWithValue\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  target\cf7 \strokec7 ,\cf4 \strokec4  \cf11 \strokec11 bytes\cf4 \strokec4  \cf12 \strokec12 memory\cf4 \strokec4  data\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint256\cf4 \strokec4  weiValue\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 string\cf4 \strokec4  \cf12 \strokec12 memory\cf4 \strokec4  errorMessage\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 private\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf11 \strokec11 bytes\cf4 \strokec4  \cf12 \strokec12 memory\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf11 \strokec11 require\cf7 \strokec7 (\cf4 \strokec4 isContract\cf7 \strokec7 (\cf4 \strokec4 target\cf7 \strokec7 ),\cf4 \strokec4  \cf15 \strokec15 "Address: call to non-contract"\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\
\cb3         \cf2 \strokec2 // solhint-disable-next-line avoid-low-level-calls\cf4 \cb1 \strokec4 \
\cb3         \cf7 \strokec7 (\cf5 \strokec5 bool\cf4 \strokec4  success\cf7 \strokec7 ,\cf4 \strokec4  \cf11 \strokec11 bytes\cf4 \strokec4  \cf12 \strokec12 memory\cf4 \strokec4  returndata\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  target\cf7 \strokec7 .\cf4 \strokec4 call\cf7 \strokec7 \{\cf4 \strokec4  value\cf7 \strokec7 :\cf4 \strokec4  weiValue \cf7 \strokec7 \}(\cf4 \strokec4 data\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3         \cf13 \strokec13 if\cf4 \strokec4  \cf7 \strokec7 (\cf4 \strokec4 success\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3             \cf10 \strokec10 return\cf4 \strokec4  returndata\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3         \cf7 \strokec7 \}\cf4 \strokec4  \cf13 \strokec13 else\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3             \cf2 \strokec2 // Look for revert reason and bubble it up if present\cf4 \cb1 \strokec4 \
\cb3             \cf13 \strokec13 if\cf4 \strokec4  \cf7 \strokec7 (\cf4 \strokec4 returndata\cf7 \strokec7 .\cf4 \strokec4 length \cf7 \strokec7 >\cf4 \strokec4  \cf6 \strokec6 0\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3                 \cf2 \strokec2 // The easiest way to bubble the revert reason is using memory via assembly\cf4 \cb1 \strokec4 \
\
\cb3                 \cf2 \strokec2 // solhint-disable-next-line no-inline-assembly\cf4 \cb1 \strokec4 \
\cb3                 assembly \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3                     \cf5 \strokec5 let\cf4 \strokec4  returndata_size := mload\cf7 \strokec7 (\cf4 \strokec4 returndata\cf7 \strokec7 )\cf4 \cb1 \strokec4 \
\cb3                     \cf11 \strokec11 revert\cf7 \strokec7 (\cf4 \strokec4 add\cf7 \strokec7 (\cf6 \strokec6 32\cf7 \strokec7 ,\cf4 \strokec4  returndata\cf7 \strokec7 ),\cf4 \strokec4  returndata_size\cf7 \strokec7 )\cf4 \cb1 \strokec4 \
\cb3                 \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\cb3             \cf7 \strokec7 \}\cf4 \strokec4  \cf13 \strokec13 else\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3                 \cf11 \strokec11 revert\cf7 \strokec7 (\cf4 \strokec4 errorMessage\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3             \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\cb3         \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 interface IERC20Metadata \cf5 \strokec5 is\cf4 \strokec4  IERC20 \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 function\cf4 \strokec4  name\cf7 \strokec7 ()\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 string\cf4 \strokec4  \cf12 \strokec12 memory\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 function\cf4 \strokec4  symbol\cf7 \strokec7 ()\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 string\cf4 \strokec4  \cf12 \strokec12 memory\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 function\cf4 \strokec4  decimals\cf7 \strokec7 ()\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 uint8\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 contract\cf4 \strokec4  ERC20 \cf5 \strokec5 is\cf4 \strokec4  Context\cf7 \strokec7 ,\cf4 \strokec4  IERC20\cf7 \strokec7 ,\cf4 \strokec4  IERC20Metadata \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3     \cf5 \strokec5 using\cf4 \strokec4  SafeMath \cf17 \strokec17 for\cf4 \strokec4  \cf5 \strokec5 uint256\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 mapping\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  => \cf5 \strokec5 uint256\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 private\cf4 \strokec4  _balances\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 mapping\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  => \cf5 \strokec5 mapping\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  => \cf5 \strokec5 uint256\cf7 \strokec7 ))\cf4 \strokec4  \cf8 \strokec8 private\cf4 \strokec4  _allowances\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 uint256\cf4 \strokec4  \cf8 \strokec8 private\cf4 \strokec4  _totalSupply\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 string\cf4 \strokec4  \cf8 \strokec8 private\cf4 \strokec4  _name\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 string\cf4 \strokec4  \cf8 \strokec8 private\cf4 \strokec4  _symbol\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\
\cb3     \cf14 \strokec14 constructor\cf7 \strokec7 (\cf5 \strokec5 string\cf4 \strokec4  \cf12 \strokec12 memory\cf4 \strokec4  name_\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 string\cf4 \strokec4  \cf12 \strokec12 memory\cf4 \strokec4  symbol_\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         _name \cf7 \strokec7 =\cf4 \strokec4  name_\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3         _symbol \cf7 \strokec7 =\cf4 \strokec4  symbol_\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  name\cf7 \strokec7 ()\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf9 \strokec9 virtual\cf4 \strokec4  \cf18 \strokec18 override\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 string\cf4 \strokec4  \cf12 \strokec12 memory\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf10 \strokec10 return\cf4 \strokec4  _name\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  symbol\cf7 \strokec7 ()\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf9 \strokec9 virtual\cf4 \strokec4  \cf18 \strokec18 override\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 string\cf4 \strokec4  \cf12 \strokec12 memory\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf10 \strokec10 return\cf4 \strokec4  _symbol\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  decimals\cf7 \strokec7 ()\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf9 \strokec9 virtual\cf4 \strokec4  \cf18 \strokec18 override\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 uint8\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf10 \strokec10 return\cf4 \strokec4  \cf6 \strokec6 18\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  totalSupply\cf7 \strokec7 ()\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf9 \strokec9 virtual\cf4 \strokec4  \cf18 \strokec18 override\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 uint256\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf10 \strokec10 return\cf4 \strokec4  _totalSupply\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  balanceOf\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  account\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf9 \strokec9 virtual\cf4 \strokec4  \cf18 \strokec18 override\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 uint256\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf10 \strokec10 return\cf4 \strokec4  _balances\cf7 \strokec7 [\cf4 \strokec4 account\cf7 \strokec7 ];\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  transfer\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  recipient\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint256\cf4 \strokec4  amount\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  \cf9 \strokec9 virtual\cf4 \strokec4  \cf18 \strokec18 override\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 bool\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         _transfer\cf7 \strokec7 (\cf4 \strokec4 _msgSender\cf7 \strokec7 (),\cf4 \strokec4  recipient\cf7 \strokec7 ,\cf4 \strokec4  amount\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3         \cf10 \strokec10 return\cf4 \strokec4  \cf5 \strokec5 true\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  allowance\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  owner\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 address\cf4 \strokec4  spender\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf9 \strokec9 virtual\cf4 \strokec4  \cf18 \strokec18 override\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 uint256\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf10 \strokec10 return\cf4 \strokec4  _allowances\cf7 \strokec7 [\cf4 \strokec4 owner\cf7 \strokec7 ][\cf4 \strokec4 spender\cf7 \strokec7 ];\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  approve\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  spender\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint256\cf4 \strokec4  amount\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  \cf9 \strokec9 virtual\cf4 \strokec4  \cf18 \strokec18 override\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 bool\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         _approve\cf7 \strokec7 (\cf4 \strokec4 _msgSender\cf7 \strokec7 (),\cf4 \strokec4  spender\cf7 \strokec7 ,\cf4 \strokec4  amount\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3         \cf10 \strokec10 return\cf4 \strokec4  \cf5 \strokec5 true\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  transferFrom\cf7 \strokec7 (\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 address\cf4 \strokec4  sender\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 address\cf4 \strokec4  recipient\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 uint256\cf4 \strokec4  amount\cb1 \
\cb3     \cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  \cf9 \strokec9 virtual\cf4 \strokec4  \cf18 \strokec18 override\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 bool\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         _transfer\cf7 \strokec7 (\cf4 \strokec4 sender\cf7 \strokec7 ,\cf4 \strokec4  recipient\cf7 \strokec7 ,\cf4 \strokec4  amount\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3         _approve\cf7 \strokec7 (\cf4 \strokec4 sender\cf7 \strokec7 ,\cf4 \strokec4  _msgSender\cf7 \strokec7 (),\cf4 \strokec4  _allowances\cf7 \strokec7 [\cf4 \strokec4 sender\cf7 \strokec7 ][\cf4 \strokec4 _msgSender\cf7 \strokec7 ()].\cf4 \strokec4 sub\cf7 \strokec7 (\cf4 \strokec4 amount\cf7 \strokec7 ,\cf4 \strokec4  \cf15 \strokec15 "ERC20: transfer amount exceeds allowance"\cf7 \strokec7 ));\cf4 \cb1 \strokec4 \
\cb3         \cf10 \strokec10 return\cf4 \strokec4  \cf5 \strokec5 true\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  increaseAllowance\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  spender\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint256\cf4 \strokec4  addedValue\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  \cf9 \strokec9 virtual\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 bool\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         _approve\cf7 \strokec7 (\cf4 \strokec4 _msgSender\cf7 \strokec7 (),\cf4 \strokec4  spender\cf7 \strokec7 ,\cf4 \strokec4  _allowances\cf7 \strokec7 [\cf4 \strokec4 _msgSender\cf7 \strokec7 ()][\cf4 \strokec4 spender\cf7 \strokec7 ].\cf4 \strokec4 add\cf7 \strokec7 (\cf4 \strokec4 addedValue\cf7 \strokec7 ));\cf4 \cb1 \strokec4 \
\cb3         \cf10 \strokec10 return\cf4 \strokec4  \cf5 \strokec5 true\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  decreaseAllowance\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  spender\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint256\cf4 \strokec4  subtractedValue\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  \cf9 \strokec9 virtual\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 bool\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         _approve\cf7 \strokec7 (\cf4 \strokec4 _msgSender\cf7 \strokec7 (),\cf4 \strokec4  spender\cf7 \strokec7 ,\cf4 \strokec4  _allowances\cf7 \strokec7 [\cf4 \strokec4 _msgSender\cf7 \strokec7 ()][\cf4 \strokec4 spender\cf7 \strokec7 ].\cf4 \strokec4 sub\cf7 \strokec7 (\cf4 \strokec4 subtractedValue\cf7 \strokec7 ,\cf4 \strokec4  \cf15 \strokec15 "ERC20: decreased allowance below zero"\cf7 \strokec7 ));\cf4 \cb1 \strokec4 \
\cb3         \cf10 \strokec10 return\cf4 \strokec4  \cf5 \strokec5 true\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  _transfer\cf7 \strokec7 (\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 address\cf4 \strokec4  sender\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 address\cf4 \strokec4  recipient\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 uint256\cf4 \strokec4  amount\cb1 \
\cb3     \cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 internal\cf4 \strokec4  \cf9 \strokec9 virtual\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf11 \strokec11 require\cf7 \strokec7 (\cf4 \strokec4 sender \cf7 \strokec7 !=\cf4 \strokec4  \cf5 \strokec5 address\cf7 \strokec7 (\cf6 \strokec6 0\cf7 \strokec7 ),\cf4 \strokec4  \cf15 \strokec15 "ERC20: transfer from the zero address"\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3         \cf11 \strokec11 require\cf7 \strokec7 (\cf4 \strokec4 recipient \cf7 \strokec7 !=\cf4 \strokec4  \cf5 \strokec5 address\cf7 \strokec7 (\cf6 \strokec6 0\cf7 \strokec7 ),\cf4 \strokec4  \cf15 \strokec15 "ERC20: transfer to the zero address"\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3         _beforeTokenTransfer\cf7 \strokec7 (\cf4 \strokec4 sender\cf7 \strokec7 ,\cf4 \strokec4  recipient\cf7 \strokec7 ,\cf4 \strokec4  amount\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3         _balances\cf7 \strokec7 [\cf4 \strokec4 sender\cf7 \strokec7 ]\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  _balances\cf7 \strokec7 [\cf4 \strokec4 sender\cf7 \strokec7 ].\cf4 \strokec4 sub\cf7 \strokec7 (\cf4 \strokec4 amount\cf7 \strokec7 ,\cf4 \strokec4  \cf15 \strokec15 "ERC20: transfer amount exceeds balance"\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3         _balances\cf7 \strokec7 [\cf4 \strokec4 recipient\cf7 \strokec7 ]\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  _balances\cf7 \strokec7 [\cf4 \strokec4 recipient\cf7 \strokec7 ].\cf4 \strokec4 add\cf7 \strokec7 (\cf4 \strokec4 amount\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 emit\cf4 \strokec4  Transfer\cf7 \strokec7 (\cf4 \strokec4 sender\cf7 \strokec7 ,\cf4 \strokec4  recipient\cf7 \strokec7 ,\cf4 \strokec4  amount\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  _mint\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  account\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint256\cf4 \strokec4  amount\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 internal\cf4 \strokec4  \cf9 \strokec9 virtual\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf11 \strokec11 require\cf7 \strokec7 (\cf4 \strokec4 account \cf7 \strokec7 !=\cf4 \strokec4  \cf5 \strokec5 address\cf7 \strokec7 (\cf6 \strokec6 0\cf7 \strokec7 ),\cf4 \strokec4  \cf15 \strokec15 "ERC20: mint to the zero address"\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3         _beforeTokenTransfer\cf7 \strokec7 (\cf5 \strokec5 address\cf7 \strokec7 (\cf6 \strokec6 0\cf7 \strokec7 ),\cf4 \strokec4  account\cf7 \strokec7 ,\cf4 \strokec4  amount\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3         _totalSupply \cf7 \strokec7 =\cf4 \strokec4  _totalSupply\cf7 \strokec7 .\cf4 \strokec4 add\cf7 \strokec7 (\cf4 \strokec4 amount\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3         _balances\cf7 \strokec7 [\cf4 \strokec4 account\cf7 \strokec7 ]\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  _balances\cf7 \strokec7 [\cf4 \strokec4 account\cf7 \strokec7 ].\cf4 \strokec4 add\cf7 \strokec7 (\cf4 \strokec4 amount\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 emit\cf4 \strokec4  Transfer\cf7 \strokec7 (\cf5 \strokec5 address\cf7 \strokec7 (\cf6 \strokec6 0\cf7 \strokec7 ),\cf4 \strokec4  account\cf7 \strokec7 ,\cf4 \strokec4  amount\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  _burn\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  account\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint256\cf4 \strokec4  amount\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 internal\cf4 \strokec4  \cf9 \strokec9 virtual\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf11 \strokec11 require\cf7 \strokec7 (\cf4 \strokec4 account \cf7 \strokec7 !=\cf4 \strokec4  \cf5 \strokec5 address\cf7 \strokec7 (\cf6 \strokec6 0\cf7 \strokec7 ),\cf4 \strokec4  \cf15 \strokec15 "ERC20: burn from the zero address"\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3         _beforeTokenTransfer\cf7 \strokec7 (\cf4 \strokec4 account\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 address\cf7 \strokec7 (\cf6 \strokec6 0\cf7 \strokec7 ),\cf4 \strokec4  amount\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3         _balances\cf7 \strokec7 [\cf4 \strokec4 account\cf7 \strokec7 ]\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  _balances\cf7 \strokec7 [\cf4 \strokec4 account\cf7 \strokec7 ].\cf4 \strokec4 sub\cf7 \strokec7 (\cf4 \strokec4 amount\cf7 \strokec7 ,\cf4 \strokec4  \cf15 \strokec15 "ERC20: burn amount exceeds balance"\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3         _totalSupply \cf7 \strokec7 =\cf4 \strokec4  _totalSupply\cf7 \strokec7 .\cf4 \strokec4 sub\cf7 \strokec7 (\cf4 \strokec4 amount\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 emit\cf4 \strokec4  Transfer\cf7 \strokec7 (\cf4 \strokec4 account\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 address\cf7 \strokec7 (\cf6 \strokec6 0\cf7 \strokec7 ),\cf4 \strokec4  amount\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  _approve\cf7 \strokec7 (\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 address\cf4 \strokec4  owner\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 address\cf4 \strokec4  spender\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 uint256\cf4 \strokec4  amount\cb1 \
\cb3     \cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 internal\cf4 \strokec4  \cf9 \strokec9 virtual\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf11 \strokec11 require\cf7 \strokec7 (\cf4 \strokec4 owner \cf7 \strokec7 !=\cf4 \strokec4  \cf5 \strokec5 address\cf7 \strokec7 (\cf6 \strokec6 0\cf7 \strokec7 ),\cf4 \strokec4  \cf15 \strokec15 "ERC20: approve from the zero address"\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3         \cf11 \strokec11 require\cf7 \strokec7 (\cf4 \strokec4 spender \cf7 \strokec7 !=\cf4 \strokec4  \cf5 \strokec5 address\cf7 \strokec7 (\cf6 \strokec6 0\cf7 \strokec7 ),\cf4 \strokec4  \cf15 \strokec15 "ERC20: approve to the zero address"\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3         _allowances\cf7 \strokec7 [\cf4 \strokec4 owner\cf7 \strokec7 ][\cf4 \strokec4 spender\cf7 \strokec7 ]\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  amount\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 emit\cf4 \strokec4  Approval\cf7 \strokec7 (\cf4 \strokec4 owner\cf7 \strokec7 ,\cf4 \strokec4  spender\cf7 \strokec7 ,\cf4 \strokec4  amount\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  _beforeTokenTransfer\cf7 \strokec7 (\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 address\cf4 \strokec4  from\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 address\cf4 \strokec4  to\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 uint256\cf4 \strokec4  amount\cb1 \
\cb3     \cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 internal\cf4 \strokec4  \cf9 \strokec9 virtual\cf4 \strokec4  \cf7 \strokec7 \{\}\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 interface DividendPayingTokenInterface \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 function\cf4 \strokec4  dividendOf\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  _owner\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf10 \strokec10 returns\cf7 \strokec7 (\cf5 \strokec5 uint256\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 function\cf4 \strokec4  withdrawDividend\cf7 \strokec7 ()\cf4 \strokec4  \cf8 \strokec8 external\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3   \cb1 \
\cb3     \cf5 \strokec5 event\cf4 \strokec4  DividendsDistributed\cf7 \strokec7 (\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 address\cf4 \strokec4  \cf13 \strokec13 indexed\cf4 \strokec4  from\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 uint256\cf4 \strokec4  weiAmount\cb1 \
\cb3     \cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 event\cf4 \strokec4  DividendWithdrawn\cf7 \strokec7 (\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 address\cf4 \strokec4  \cf13 \strokec13 indexed\cf4 \strokec4  to\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 uint256\cf4 \strokec4  weiAmount\cb1 \
\cb3     \cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 interface DividendPayingTokenOptionalInterface \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 function\cf4 \strokec4  withdrawableDividendOf\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  _owner\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf10 \strokec10 returns\cf7 \strokec7 (\cf5 \strokec5 uint256\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 function\cf4 \strokec4  withdrawnDividendOf\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  _owner\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf10 \strokec10 returns\cf7 \strokec7 (\cf5 \strokec5 uint256\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 function\cf4 \strokec4  accumulativeDividendOf\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  _owner\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf10 \strokec10 returns\cf7 \strokec7 (\cf5 \strokec5 uint256\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 contract\cf4 \strokec4  DividendPayingToken \cf5 \strokec5 is\cf4 \strokec4  ERC20\cf7 \strokec7 ,\cf4 \strokec4  Ownable\cf7 \strokec7 ,\cf4 \strokec4  DividendPayingTokenInterface\cf7 \strokec7 ,\cf4 \strokec4  DividendPayingTokenOptionalInterface \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3     \cf5 \strokec5 using\cf4 \strokec4  SafeMath \cf17 \strokec17 for\cf4 \strokec4  \cf5 \strokec5 uint256\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 using\cf4 \strokec4  SafeMathUint \cf17 \strokec17 for\cf4 \strokec4  \cf5 \strokec5 uint256\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 using\cf4 \strokec4  SafeMathInt \cf17 \strokec17 for\cf4 \strokec4  \cf5 \strokec5 int256\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 uint256\cf4 \strokec4  \cf5 \strokec5 constant\cf4 \strokec4  \cf8 \strokec8 internal\cf4 \strokec4  magnitude \cf7 \strokec7 =\cf4 \strokec4  \cf6 \strokec6 2\cf4 \strokec4 **\cf6 \strokec6 128\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 uint256\cf4 \strokec4  \cf8 \strokec8 internal\cf4 \strokec4  magnifiedDividendPerShare\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 uint256\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  totalDividendsDistributed\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cb1 \
\cb3     \cf5 \strokec5 address\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  \cf18 \strokec18 immutable\cf4 \strokec4  rewardToken\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cb1 \
\cb3     \cf5 \strokec5 mapping\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  => \cf5 \strokec5 int256\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 internal\cf4 \strokec4  magnifiedDividendCorrections\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 mapping\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  => \cf5 \strokec5 uint256\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 internal\cf4 \strokec4  withdrawnDividends\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\
\cb3     \cf14 \strokec14 constructor\cf7 \strokec7 (\cf5 \strokec5 string\cf4 \strokec4  \cf12 \strokec12 memory\cf4 \strokec4  _name\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 string\cf4 \strokec4  \cf12 \strokec12 memory\cf4 \strokec4  _symbol\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 address\cf4 \strokec4  _rewardToken\cf7 \strokec7 )\cf4 \strokec4  ERC20\cf7 \strokec7 (\cf4 \strokec4 _name\cf7 \strokec7 ,\cf4 \strokec4  _symbol\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \strokec4  \cb1 \
\cb3         rewardToken \cf7 \strokec7 =\cf4 \strokec4  _rewardToken\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  distributeDividends\cf7 \strokec7 (\cf5 \strokec5 uint256\cf4 \strokec4  amount\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  onlyOwner\cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf11 \strokec11 require\cf7 \strokec7 (\cf4 \strokec4 totalSupply\cf7 \strokec7 ()\cf4 \strokec4  \cf7 \strokec7 >\cf4 \strokec4  \cf6 \strokec6 0\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\
\cb3         \cf13 \strokec13 if\cf4 \strokec4  \cf7 \strokec7 (\cf4 \strokec4 amount \cf7 \strokec7 >\cf4 \strokec4  \cf6 \strokec6 0\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3             magnifiedDividendPerShare \cf7 \strokec7 =\cf4 \strokec4  magnifiedDividendPerShare\cf7 \strokec7 .\cf4 \strokec4 add\cf7 \strokec7 (\cf4 \cb1 \strokec4 \
\cb3                 \cf7 \strokec7 (\cf4 \strokec4 amount\cf7 \strokec7 ).\cf4 \strokec4 mul\cf7 \strokec7 (\cf4 \strokec4 magnitude\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 /\cf4 \strokec4  totalSupply\cf7 \strokec7 ()\cf4 \cb1 \strokec4 \
\cb3             \cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 emit\cf4 \strokec4  DividendsDistributed\cf7 \strokec7 (\cf11 \strokec11 msg\cf7 \strokec7 .\cf4 \strokec4 sender\cf7 \strokec7 ,\cf4 \strokec4  amount\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\
\cb3             totalDividendsDistributed \cf7 \strokec7 =\cf4 \strokec4  totalDividendsDistributed\cf7 \strokec7 .\cf4 \strokec4 add\cf7 \strokec7 (\cf4 \strokec4 amount\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3         \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  withdrawDividend\cf7 \strokec7 ()\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  \cf9 \strokec9 virtual\cf4 \strokec4  \cf18 \strokec18 override\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         _withdrawDividendOfUser\cf7 \strokec7 (\cf8 \strokec8 payable\cf7 \strokec7 (\cf11 \strokec11 msg\cf7 \strokec7 .\cf4 \strokec4 sender\cf7 \strokec7 ));\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  _withdrawDividendOfUser\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  \cf8 \strokec8 payable\cf4 \strokec4  user\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 internal\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 uint256\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 uint256\cf4 \strokec4  _withdrawableDividend \cf7 \strokec7 =\cf4 \strokec4  withdrawableDividendOf\cf7 \strokec7 (\cf4 \strokec4 user\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3         \cf13 \strokec13 if\cf4 \strokec4  \cf7 \strokec7 (\cf4 \strokec4 _withdrawableDividend \cf7 \strokec7 >\cf4 \strokec4  \cf6 \strokec6 0\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3             withdrawnDividends\cf7 \strokec7 [\cf4 \strokec4 user\cf7 \strokec7 ]\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  withdrawnDividends\cf7 \strokec7 [\cf4 \strokec4 user\cf7 \strokec7 ].\cf4 \strokec4 add\cf7 \strokec7 (\cf4 \strokec4 _withdrawableDividend\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 emit\cf4 \strokec4  DividendWithdrawn\cf7 \strokec7 (\cf4 \strokec4 user\cf7 \strokec7 ,\cf4 \strokec4  _withdrawableDividend\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 bool\cf4 \strokec4  success \cf7 \strokec7 =\cf4 \strokec4  IERC20\cf7 \strokec7 (\cf4 \strokec4 rewardToken\cf7 \strokec7 ).\cf4 \strokec4 transfer\cf7 \strokec7 (\cf4 \strokec4 user\cf7 \strokec7 ,\cf4 \strokec4  _withdrawableDividend\cf7 \strokec7 );\cf4 \strokec4  \cb1 \
\cb3             \cf13 \strokec13 if\cf7 \strokec7 (!\cf4 \strokec4 success\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3                 withdrawnDividends\cf7 \strokec7 [\cf4 \strokec4 user\cf7 \strokec7 ]\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  withdrawnDividends\cf7 \strokec7 [\cf4 \strokec4 user\cf7 \strokec7 ].\cf4 \strokec4 sub\cf7 \strokec7 (\cf4 \strokec4 _withdrawableDividend\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3                 \cf10 \strokec10 return\cf4 \strokec4  \cf6 \strokec6 0\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3             \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3             \cf10 \strokec10 return\cf4 \strokec4  _withdrawableDividend\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3         \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\cb3         \cf10 \strokec10 return\cf4 \strokec4  \cf6 \strokec6 0\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  dividendOf\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  _owner\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf18 \strokec18 override\cf4 \strokec4  \cf10 \strokec10 returns\cf7 \strokec7 (\cf5 \strokec5 uint256\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf10 \strokec10 return\cf4 \strokec4  withdrawableDividendOf\cf7 \strokec7 (\cf4 \strokec4 _owner\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  withdrawableDividendOf\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  _owner\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf18 \strokec18 override\cf4 \strokec4  \cf10 \strokec10 returns\cf7 \strokec7 (\cf5 \strokec5 uint256\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf10 \strokec10 return\cf4 \strokec4  accumulativeDividendOf\cf7 \strokec7 (\cf4 \strokec4 _owner\cf7 \strokec7 ).\cf4 \strokec4 sub\cf7 \strokec7 (\cf4 \strokec4 withdrawnDividends\cf7 \strokec7 [\cf4 \strokec4 _owner\cf7 \strokec7 ]);\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  withdrawnDividendOf\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  _owner\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf18 \strokec18 override\cf4 \strokec4  \cf10 \strokec10 returns\cf7 \strokec7 (\cf5 \strokec5 uint256\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf10 \strokec10 return\cf4 \strokec4  withdrawnDividends\cf7 \strokec7 [\cf4 \strokec4 _owner\cf7 \strokec7 ];\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  accumulativeDividendOf\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  _owner\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf18 \strokec18 override\cf4 \strokec4  \cf10 \strokec10 returns\cf7 \strokec7 (\cf5 \strokec5 uint256\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf10 \strokec10 return\cf4 \strokec4  magnifiedDividendPerShare\cf7 \strokec7 .\cf4 \strokec4 mul\cf7 \strokec7 (\cf4 \strokec4 balanceOf\cf7 \strokec7 (\cf4 \strokec4 _owner\cf7 \strokec7 )).\cf4 \strokec4 toInt256Safe\cf7 \strokec7 ()\cf4 \cb1 \strokec4 \
\cb3         \cf7 \strokec7 .\cf4 \strokec4 add\cf7 \strokec7 (\cf4 \strokec4 magnifiedDividendCorrections\cf7 \strokec7 [\cf4 \strokec4 _owner\cf7 \strokec7 ]).\cf4 \strokec4 toUint256Safe\cf7 \strokec7 ()\cf4 \strokec4  \cf7 \strokec7 /\cf4 \strokec4  magnitude\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  _transfer\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  from\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 address\cf4 \strokec4  to\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint256\cf4 \strokec4  value\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 internal\cf4 \strokec4  \cf9 \strokec9 virtual\cf4 \strokec4  \cf18 \strokec18 override\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf11 \strokec11 require\cf7 \strokec7 (\cf5 \strokec5 false\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\
\cb3         \cf5 \strokec5 int256\cf4 \strokec4  _magCorrection \cf7 \strokec7 =\cf4 \strokec4  magnifiedDividendPerShare\cf7 \strokec7 .\cf4 \strokec4 mul\cf7 \strokec7 (\cf4 \strokec4 value\cf7 \strokec7 ).\cf4 \strokec4 toInt256Safe\cf7 \strokec7 ();\cf4 \cb1 \strokec4 \
\cb3         magnifiedDividendCorrections\cf7 \strokec7 [\cf4 \strokec4 from\cf7 \strokec7 ]\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  magnifiedDividendCorrections\cf7 \strokec7 [\cf4 \strokec4 from\cf7 \strokec7 ].\cf4 \strokec4 add\cf7 \strokec7 (\cf4 \strokec4 _magCorrection\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3         magnifiedDividendCorrections\cf7 \strokec7 [\cf4 \strokec4 to\cf7 \strokec7 ]\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  magnifiedDividendCorrections\cf7 \strokec7 [\cf4 \strokec4 to\cf7 \strokec7 ].\cf4 \strokec4 sub\cf7 \strokec7 (\cf4 \strokec4 _magCorrection\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  _mint\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  account\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint256\cf4 \strokec4  value\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 internal\cf4 \strokec4  \cf18 \strokec18 override\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf9 \strokec9 super\cf7 \strokec7 .\cf4 \strokec4 _mint\cf7 \strokec7 (\cf4 \strokec4 account\cf7 \strokec7 ,\cf4 \strokec4  value\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\
\cb3         magnifiedDividendCorrections\cf7 \strokec7 [\cf4 \strokec4 account\cf7 \strokec7 ]\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  magnifiedDividendCorrections\cf7 \strokec7 [\cf4 \strokec4 account\cf7 \strokec7 ]\cf4 \cb1 \strokec4 \
\cb3         \cf7 \strokec7 .\cf4 \strokec4 sub\cf7 \strokec7 (\cf4 \strokec4  \cf7 \strokec7 (\cf4 \strokec4 magnifiedDividendPerShare\cf7 \strokec7 .\cf4 \strokec4 mul\cf7 \strokec7 (\cf4 \strokec4 value\cf7 \strokec7 )).\cf4 \strokec4 toInt256Safe\cf7 \strokec7 ()\cf4 \strokec4  \cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  _burn\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  account\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint256\cf4 \strokec4  value\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 internal\cf4 \strokec4  \cf18 \strokec18 override\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf9 \strokec9 super\cf7 \strokec7 .\cf4 \strokec4 _burn\cf7 \strokec7 (\cf4 \strokec4 account\cf7 \strokec7 ,\cf4 \strokec4  value\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\
\cb3         magnifiedDividendCorrections\cf7 \strokec7 [\cf4 \strokec4 account\cf7 \strokec7 ]\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  magnifiedDividendCorrections\cf7 \strokec7 [\cf4 \strokec4 account\cf7 \strokec7 ]\cf4 \cb1 \strokec4 \
\cb3         \cf7 \strokec7 .\cf4 \strokec4 add\cf7 \strokec7 (\cf4 \strokec4  \cf7 \strokec7 (\cf4 \strokec4 magnifiedDividendPerShare\cf7 \strokec7 .\cf4 \strokec4 mul\cf7 \strokec7 (\cf4 \strokec4 value\cf7 \strokec7 )).\cf4 \strokec4 toInt256Safe\cf7 \strokec7 ()\cf4 \strokec4  \cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  _setBalance\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  account\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint256\cf4 \strokec4  newBalance\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 internal\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 uint256\cf4 \strokec4  currentBalance \cf7 \strokec7 =\cf4 \strokec4  balanceOf\cf7 \strokec7 (\cf4 \strokec4 account\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\
\cb3         \cf13 \strokec13 if\cf7 \strokec7 (\cf4 \strokec4 newBalance \cf7 \strokec7 >\cf4 \strokec4  currentBalance\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 uint256\cf4 \strokec4  mintAmount \cf7 \strokec7 =\cf4 \strokec4  newBalance\cf7 \strokec7 .\cf4 \strokec4 sub\cf7 \strokec7 (\cf4 \strokec4 currentBalance\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3             _mint\cf7 \strokec7 (\cf4 \strokec4 account\cf7 \strokec7 ,\cf4 \strokec4  mintAmount\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3         \cf7 \strokec7 \}\cf4 \strokec4  \cf13 \strokec13 else\cf4 \strokec4  \cf13 \strokec13 if\cf7 \strokec7 (\cf4 \strokec4 newBalance \cf7 \strokec7 <\cf4 \strokec4  currentBalance\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 uint256\cf4 \strokec4  burnAmount \cf7 \strokec7 =\cf4 \strokec4  currentBalance\cf7 \strokec7 .\cf4 \strokec4 sub\cf7 \strokec7 (\cf4 \strokec4 newBalance\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3             _burn\cf7 \strokec7 (\cf4 \strokec4 account\cf7 \strokec7 ,\cf4 \strokec4  burnAmount\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3         \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 contract\cf4 \strokec4  DividendTracker \cf5 \strokec5 is\cf4 \strokec4  Ownable\cf7 \strokec7 ,\cf4 \strokec4  DividendPayingToken \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3     \cf5 \strokec5 using\cf4 \strokec4  SafeMath \cf17 \strokec17 for\cf4 \strokec4  \cf5 \strokec5 uint256\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 using\cf4 \strokec4  SafeMathInt \cf17 \strokec17 for\cf4 \strokec4  \cf5 \strokec5 int256\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 using\cf4 \strokec4  IterableMapping \cf17 \strokec17 for\cf4 \strokec4  IterableMapping\cf7 \strokec7 .\cf4 \strokec4 Map\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\
\cb3     IterableMapping\cf7 \strokec7 .\cf4 \strokec4 Map \cf8 \strokec8 private\cf4 \strokec4  tokenHoldersMap\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 uint256\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  lastProcessedIndex\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 mapping\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  => \cf5 \strokec5 bool\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  excludedFromDividends\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 mapping\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  => \cf5 \strokec5 uint256\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  lastClaimTimes\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 uint256\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  claimWait\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 uint256\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  minimumTokenBalanceForDividends\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 event\cf4 \strokec4  ExcludeFromDividends\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  \cf13 \strokec13 indexed\cf4 \strokec4  account\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 event\cf4 \strokec4  ClaimWaitUpdated\cf7 \strokec7 (\cf5 \strokec5 uint256\cf4 \strokec4  \cf13 \strokec13 indexed\cf4 \strokec4  newValue\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint256\cf4 \strokec4  \cf13 \strokec13 indexed\cf4 \strokec4  oldValue\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 event\cf4 \strokec4  Claim\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  \cf13 \strokec13 indexed\cf4 \strokec4  account\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint256\cf4 \strokec4  amount\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 bool\cf4 \strokec4  \cf13 \strokec13 indexed\cf4 \strokec4  automatic\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\
\cb3     \cf14 \strokec14 constructor\cf7 \strokec7 (\cf5 \strokec5 uint256\cf4 \strokec4  minBalance\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 address\cf4 \strokec4  _rewardToken\cf7 \strokec7 )\cf4 \strokec4  DividendPayingToken\cf7 \strokec7 (\cf15 \strokec15 "Reward Tracker"\cf7 \strokec7 ,\cf4 \strokec4  \cf15 \strokec15 "DividendTracker"\cf7 \strokec7 ,\cf4 \strokec4  _rewardToken\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         claimWait \cf7 \strokec7 =\cf4 \strokec4  \cf6 \strokec6 3600\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3         minimumTokenBalanceForDividends \cf7 \strokec7 =\cf4 \strokec4  minBalance \cf7 \strokec7 *\cf4 \strokec4  \cf6 \strokec6 10\cf4 \strokec4  ** \cf6 \strokec6 18\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  _transfer\cf7 \strokec7 (\cf5 \strokec5 address\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 address\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint256\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 internal\cf4 \strokec4  \cf8 \strokec8 pure\cf4 \strokec4  \cf18 \strokec18 override\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf11 \strokec11 require\cf7 \strokec7 (\cf5 \strokec5 false\cf7 \strokec7 ,\cf4 \strokec4  \cf15 \strokec15 "No transfers allowed"\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  withdrawDividend\cf7 \strokec7 ()\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  \cf8 \strokec8 pure\cf4 \strokec4  \cf18 \strokec18 override\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf11 \strokec11 require\cf7 \strokec7 (\cf5 \strokec5 false\cf7 \strokec7 ,\cf4 \strokec4  \cf15 \strokec15 "withdrawDividend disabled. Use the 'claim' function on the main contract."\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  updateMinimumTokenBalanceForDividends\cf7 \strokec7 (\cf5 \strokec5 uint256\cf4 \strokec4  _newMinimumBalance\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  onlyOwner \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf11 \strokec11 require\cf7 \strokec7 (\cf4 \strokec4 _newMinimumBalance \cf7 \strokec7 !=\cf4 \strokec4  minimumTokenBalanceForDividends\cf7 \strokec7 ,\cf4 \strokec4  \cf15 \strokec15 "New mimimum balance for dividend cannot be same as current minimum balance"\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3         minimumTokenBalanceForDividends \cf7 \strokec7 =\cf4 \strokec4  _newMinimumBalance\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  excludeFromDividends\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  account\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  onlyOwner \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf11 \strokec11 require\cf7 \strokec7 (!\cf4 \strokec4 excludedFromDividends\cf7 \strokec7 [\cf4 \strokec4 account\cf7 \strokec7 ]);\cf4 \cb1 \strokec4 \
\cb3         excludedFromDividends\cf7 \strokec7 [\cf4 \strokec4 account\cf7 \strokec7 ]\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 true\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\
\cb3         _setBalance\cf7 \strokec7 (\cf4 \strokec4 account\cf7 \strokec7 ,\cf4 \strokec4  \cf6 \strokec6 0\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3         tokenHoldersMap\cf7 \strokec7 .\cf4 \strokec4 remove\cf7 \strokec7 (\cf4 \strokec4 account\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\
\cb3         \cf5 \strokec5 emit\cf4 \strokec4  ExcludeFromDividends\cf7 \strokec7 (\cf4 \strokec4 account\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  updateClaimWait\cf7 \strokec7 (\cf5 \strokec5 uint256\cf4 \strokec4  newClaimWait\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  onlyOwner \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf11 \strokec11 require\cf7 \strokec7 (\cf4 \strokec4 newClaimWait \cf7 \strokec7 >=\cf4 \strokec4  \cf6 \strokec6 3600\cf4 \strokec4  \cf7 \strokec7 &&\cf4 \strokec4  newClaimWait \cf7 \strokec7 <=\cf4 \strokec4  \cf6 \strokec6 86400\cf7 \strokec7 ,\cf4 \strokec4  \cf15 \strokec15 "claimWait must be updated to between 1 and 24 hours"\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3         \cf11 \strokec11 require\cf7 \strokec7 (\cf4 \strokec4 newClaimWait \cf7 \strokec7 !=\cf4 \strokec4  claimWait\cf7 \strokec7 ,\cf4 \strokec4  \cf15 \strokec15 "Cannot update claimWait to same value"\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 emit\cf4 \strokec4  ClaimWaitUpdated\cf7 \strokec7 (\cf4 \strokec4 newClaimWait\cf7 \strokec7 ,\cf4 \strokec4  claimWait\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3         claimWait \cf7 \strokec7 =\cf4 \strokec4  newClaimWait\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  setLastProcessedIndex\cf7 \strokec7 (\cf5 \strokec5 uint256\cf4 \strokec4  index\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  onlyOwner \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         lastProcessedIndex \cf7 \strokec7 =\cf4 \strokec4  index\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  getLastProcessedIndex\cf7 \strokec7 ()\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf10 \strokec10 returns\cf7 \strokec7 (\cf5 \strokec5 uint256\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf10 \strokec10 return\cf4 \strokec4  lastProcessedIndex\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  getNumberOfTokenHolders\cf7 \strokec7 ()\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf10 \strokec10 returns\cf7 \strokec7 (\cf5 \strokec5 uint256\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf10 \strokec10 return\cf4 \strokec4  tokenHoldersMap\cf7 \strokec7 .\cf4 \strokec4 keys\cf7 \strokec7 .\cf4 \strokec4 length\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  getAccount\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  _account\cf7 \strokec7 )\cf4 \cb1 \strokec4 \
\cb3         \cf8 \strokec8 public\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf4 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 address\cf4 \strokec4  account\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 int256\cf4 \strokec4  index\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 int256\cf4 \strokec4  iterationsUntilProcessed\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 uint256\cf4 \strokec4  withdrawableDividends\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 uint256\cf4 \strokec4  totalDividends\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 uint256\cf4 \strokec4  lastClaimTime\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 uint256\cf4 \strokec4  nextClaimTime\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 uint256\cf4 \strokec4  secondsUntilAutoClaimAvailable\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         account \cf7 \strokec7 =\cf4 \strokec4  _account\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\
\cb3         index \cf7 \strokec7 =\cf4 \strokec4  tokenHoldersMap\cf7 \strokec7 .\cf4 \strokec4 getIndexOfKey\cf7 \strokec7 (\cf4 \strokec4 account\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\
\cb3         iterationsUntilProcessed \cf7 \strokec7 =\cf4 \strokec4  \cf7 \strokec7 -\cf6 \strokec6 1\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\
\cb3         \cf13 \strokec13 if\cf7 \strokec7 (\cf4 \strokec4 index \cf7 \strokec7 >=\cf4 \strokec4  \cf6 \strokec6 0\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3             \cf13 \strokec13 if\cf7 \strokec7 (\cf5 \strokec5 uint256\cf7 \strokec7 (\cf4 \strokec4 index\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 >\cf4 \strokec4  lastProcessedIndex\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3                 iterationsUntilProcessed \cf7 \strokec7 =\cf4 \strokec4  index\cf7 \strokec7 .\cf4 \strokec4 sub\cf7 \strokec7 (\cf5 \strokec5 int256\cf7 \strokec7 (\cf4 \strokec4 lastProcessedIndex\cf7 \strokec7 ));\cf4 \cb1 \strokec4 \
\cb3             \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\cb3             \cf13 \strokec13 else\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3                 \cf5 \strokec5 uint256\cf4 \strokec4  processesUntilEndOfArray \cf7 \strokec7 =\cf4 \strokec4  tokenHoldersMap\cf7 \strokec7 .\cf4 \strokec4 keys\cf7 \strokec7 .\cf4 \strokec4 length \cf7 \strokec7 >\cf4 \strokec4  lastProcessedIndex \cf7 \strokec7 ?\cf4 \cb1 \strokec4 \
\cb3                                                         tokenHoldersMap\cf7 \strokec7 .\cf4 \strokec4 keys\cf7 \strokec7 .\cf4 \strokec4 length\cf7 \strokec7 .\cf4 \strokec4 sub\cf7 \strokec7 (\cf4 \strokec4 lastProcessedIndex\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 :\cf4 \cb1 \strokec4 \
\cb3                                                         \cf6 \strokec6 0\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\
\
\cb3                 iterationsUntilProcessed \cf7 \strokec7 =\cf4 \strokec4  index\cf7 \strokec7 .\cf4 \strokec4 add\cf7 \strokec7 (\cf5 \strokec5 int256\cf7 \strokec7 (\cf4 \strokec4 processesUntilEndOfArray\cf7 \strokec7 ));\cf4 \cb1 \strokec4 \
\cb3             \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\cb3         \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\
\cb3         withdrawableDividends \cf7 \strokec7 =\cf4 \strokec4  withdrawableDividendOf\cf7 \strokec7 (\cf4 \strokec4 account\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3         totalDividends \cf7 \strokec7 =\cf4 \strokec4  accumulativeDividendOf\cf7 \strokec7 (\cf4 \strokec4 account\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\
\cb3         lastClaimTime \cf7 \strokec7 =\cf4 \strokec4  lastClaimTimes\cf7 \strokec7 [\cf4 \strokec4 account\cf7 \strokec7 ];\cf4 \cb1 \strokec4 \
\
\cb3         nextClaimTime \cf7 \strokec7 =\cf4 \strokec4  lastClaimTime \cf7 \strokec7 >\cf4 \strokec4  \cf6 \strokec6 0\cf4 \strokec4  \cf7 \strokec7 ?\cf4 \cb1 \strokec4 \
\cb3                                     lastClaimTime\cf7 \strokec7 .\cf4 \strokec4 add\cf7 \strokec7 (\cf4 \strokec4 claimWait\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 :\cf4 \cb1 \strokec4 \
\cb3                                     \cf6 \strokec6 0\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\
\cb3         secondsUntilAutoClaimAvailable \cf7 \strokec7 =\cf4 \strokec4  nextClaimTime \cf7 \strokec7 >\cf4 \strokec4  \cf11 \strokec11 block\cf7 \strokec7 .\cf4 \strokec4 timestamp \cf7 \strokec7 ?\cf4 \cb1 \strokec4 \
\cb3                                                     nextClaimTime\cf7 \strokec7 .\cf4 \strokec4 sub\cf7 \strokec7 (\cf11 \strokec11 block\cf7 \strokec7 .\cf4 \strokec4 timestamp\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 :\cf4 \cb1 \strokec4 \
\cb3                                                     \cf6 \strokec6 0\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  getAccountAtIndex\cf7 \strokec7 (\cf5 \strokec5 uint256\cf4 \strokec4  index\cf7 \strokec7 )\cf4 \cb1 \strokec4 \
\cb3         \cf8 \strokec8 public\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf4 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 address\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 int256\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 int256\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 uint256\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 uint256\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 uint256\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 uint256\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 uint256\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf13 \strokec13 if\cf7 \strokec7 (\cf4 \strokec4 index \cf7 \strokec7 >=\cf4 \strokec4  tokenHoldersMap\cf7 \strokec7 .\cf4 \strokec4 size\cf7 \strokec7 ())\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3             \cf10 \strokec10 return\cf4 \strokec4  \cf7 \strokec7 (\cf16 \strokec16 0x0000000000000000000000000000000000000000\cf7 \strokec7 ,\cf4 \strokec4  \cf7 \strokec7 -\cf6 \strokec6 1\cf7 \strokec7 ,\cf4 \strokec4  \cf7 \strokec7 -\cf6 \strokec6 1\cf7 \strokec7 ,\cf4 \strokec4  \cf6 \strokec6 0\cf7 \strokec7 ,\cf4 \strokec4  \cf6 \strokec6 0\cf7 \strokec7 ,\cf4 \strokec4  \cf6 \strokec6 0\cf7 \strokec7 ,\cf4 \strokec4  \cf6 \strokec6 0\cf7 \strokec7 ,\cf4 \strokec4  \cf6 \strokec6 0\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3         \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3         \cf5 \strokec5 address\cf4 \strokec4  account \cf7 \strokec7 =\cf4 \strokec4  tokenHoldersMap\cf7 \strokec7 .\cf4 \strokec4 getKeyAtIndex\cf7 \strokec7 (\cf4 \strokec4 index\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\
\cb3         \cf10 \strokec10 return\cf4 \strokec4  getAccount\cf7 \strokec7 (\cf4 \strokec4 account\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  canAutoClaim\cf7 \strokec7 (\cf5 \strokec5 uint256\cf4 \strokec4  lastClaimTime\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 private\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 bool\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf13 \strokec13 if\cf7 \strokec7 (\cf4 \strokec4 lastClaimTime \cf7 \strokec7 >\cf4 \strokec4  \cf11 \strokec11 block\cf7 \strokec7 .\cf4 \strokec4 timestamp\cf7 \strokec7 )\cf4 \strokec4   \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3             \cf10 \strokec10 return\cf4 \strokec4  \cf5 \strokec5 false\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3         \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3         \cf10 \strokec10 return\cf4 \strokec4  \cf11 \strokec11 block\cf7 \strokec7 .\cf4 \strokec4 timestamp\cf7 \strokec7 .\cf4 \strokec4 sub\cf7 \strokec7 (\cf4 \strokec4 lastClaimTime\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 >=\cf4 \strokec4  claimWait\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  setBalance\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  \cf8 \strokec8 payable\cf4 \strokec4  account\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint256\cf4 \strokec4  newBalance\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  onlyOwner \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf13 \strokec13 if\cf7 \strokec7 (\cf4 \strokec4 excludedFromDividends\cf7 \strokec7 [\cf4 \strokec4 account\cf7 \strokec7 ])\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3             \cf10 \strokec10 return\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3         \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3         \cf13 \strokec13 if\cf7 \strokec7 (\cf4 \strokec4 newBalance \cf7 \strokec7 >=\cf4 \strokec4  minimumTokenBalanceForDividends\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3             _setBalance\cf7 \strokec7 (\cf4 \strokec4 account\cf7 \strokec7 ,\cf4 \strokec4  newBalance\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3             tokenHoldersMap\cf7 \strokec7 .\cf4 \strokec4 set\cf7 \strokec7 (\cf4 \strokec4 account\cf7 \strokec7 ,\cf4 \strokec4  newBalance\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3         \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\cb3         \cf13 \strokec13 else\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3             _setBalance\cf7 \strokec7 (\cf4 \strokec4 account\cf7 \strokec7 ,\cf4 \strokec4  \cf6 \strokec6 0\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3             tokenHoldersMap\cf7 \strokec7 .\cf4 \strokec4 remove\cf7 \strokec7 (\cf4 \strokec4 account\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3         \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3         processAccount\cf7 \strokec7 (\cf4 \strokec4 account\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 true\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  process\cf7 \strokec7 (\cf5 \strokec5 uint256\cf4 \strokec4  gas\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 uint256\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint256\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint256\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 uint256\cf4 \strokec4  numberOfTokenHolders \cf7 \strokec7 =\cf4 \strokec4  tokenHoldersMap\cf7 \strokec7 .\cf4 \strokec4 keys\cf7 \strokec7 .\cf4 \strokec4 length\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\
\cb3         \cf13 \strokec13 if\cf7 \strokec7 (\cf4 \strokec4 numberOfTokenHolders \cf7 \strokec7 ==\cf4 \strokec4  \cf6 \strokec6 0\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3             \cf10 \strokec10 return\cf4 \strokec4  \cf7 \strokec7 (\cf6 \strokec6 0\cf7 \strokec7 ,\cf4 \strokec4  \cf6 \strokec6 0\cf7 \strokec7 ,\cf4 \strokec4  lastProcessedIndex\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3         \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3         \cf5 \strokec5 uint256\cf4 \strokec4  _lastProcessedIndex \cf7 \strokec7 =\cf4 \strokec4  lastProcessedIndex\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\
\cb3         \cf5 \strokec5 uint256\cf4 \strokec4  gasUsed \cf7 \strokec7 =\cf4 \strokec4  \cf6 \strokec6 0\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\
\cb3         \cf5 \strokec5 uint256\cf4 \strokec4  gasLeft \cf7 \strokec7 =\cf4 \strokec4  \cf11 \strokec11 gasleft\cf7 \strokec7 ();\cf4 \cb1 \strokec4 \
\
\cb3         \cf5 \strokec5 uint256\cf4 \strokec4  iterations \cf7 \strokec7 =\cf4 \strokec4  \cf6 \strokec6 0\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 uint256\cf4 \strokec4  claims \cf7 \strokec7 =\cf4 \strokec4  \cf6 \strokec6 0\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\
\cb3         \cf17 \strokec17 while\cf7 \strokec7 (\cf4 \strokec4 gasUsed \cf7 \strokec7 <\cf4 \strokec4  gas \cf7 \strokec7 &&\cf4 \strokec4  iterations \cf7 \strokec7 <\cf4 \strokec4  numberOfTokenHolders\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3             _lastProcessedIndex\cf7 \strokec7 ++;\cf4 \cb1 \strokec4 \
\
\cb3             \cf13 \strokec13 if\cf7 \strokec7 (\cf4 \strokec4 _lastProcessedIndex \cf7 \strokec7 >=\cf4 \strokec4  tokenHoldersMap\cf7 \strokec7 .\cf4 \strokec4 keys\cf7 \strokec7 .\cf4 \strokec4 length\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3                 _lastProcessedIndex \cf7 \strokec7 =\cf4 \strokec4  \cf6 \strokec6 0\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3             \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3             \cf5 \strokec5 address\cf4 \strokec4  account \cf7 \strokec7 =\cf4 \strokec4  tokenHoldersMap\cf7 \strokec7 .\cf4 \strokec4 keys\cf7 \strokec7 [\cf4 \strokec4 _lastProcessedIndex\cf7 \strokec7 ];\cf4 \cb1 \strokec4 \
\
\cb3             \cf13 \strokec13 if\cf7 \strokec7 (\cf4 \strokec4 canAutoClaim\cf7 \strokec7 (\cf4 \strokec4 lastClaimTimes\cf7 \strokec7 [\cf4 \strokec4 account\cf7 \strokec7 ]))\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3                 \cf13 \strokec13 if\cf7 \strokec7 (\cf4 \strokec4 processAccount\cf7 \strokec7 (\cf8 \strokec8 payable\cf7 \strokec7 (\cf4 \strokec4 account\cf7 \strokec7 ),\cf4 \strokec4  \cf5 \strokec5 true\cf7 \strokec7 ))\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3                     claims\cf7 \strokec7 ++;\cf4 \cb1 \strokec4 \
\cb3                 \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\cb3             \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3             iterations\cf7 \strokec7 ++;\cf4 \cb1 \strokec4 \
\
\cb3             \cf5 \strokec5 uint256\cf4 \strokec4  newGasLeft \cf7 \strokec7 =\cf4 \strokec4  \cf11 \strokec11 gasleft\cf7 \strokec7 ();\cf4 \cb1 \strokec4 \
\
\cb3             \cf13 \strokec13 if\cf7 \strokec7 (\cf4 \strokec4 gasLeft \cf7 \strokec7 >\cf4 \strokec4  newGasLeft\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3                 gasUsed \cf7 \strokec7 =\cf4 \strokec4  gasUsed\cf7 \strokec7 .\cf4 \strokec4 add\cf7 \strokec7 (\cf4 \strokec4 gasLeft\cf7 \strokec7 .\cf4 \strokec4 sub\cf7 \strokec7 (\cf4 \strokec4 newGasLeft\cf7 \strokec7 ));\cf4 \cb1 \strokec4 \
\cb3             \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3             gasLeft \cf7 \strokec7 =\cf4 \strokec4  newGasLeft\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3         \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3         lastProcessedIndex \cf7 \strokec7 =\cf4 \strokec4  _lastProcessedIndex\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\
\cb3         \cf10 \strokec10 return\cf4 \strokec4  \cf7 \strokec7 (\cf4 \strokec4 iterations\cf7 \strokec7 ,\cf4 \strokec4  claims\cf7 \strokec7 ,\cf4 \strokec4  lastProcessedIndex\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  processAccount\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  \cf8 \strokec8 payable\cf4 \strokec4  account\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 bool\cf4 \strokec4  automatic\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  onlyOwner \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 bool\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 uint256\cf4 \strokec4  amount \cf7 \strokec7 =\cf4 \strokec4  _withdrawDividendOfUser\cf7 \strokec7 (\cf4 \strokec4 account\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\
\cb3         \cf13 \strokec13 if\cf7 \strokec7 (\cf4 \strokec4 amount \cf7 \strokec7 >\cf4 \strokec4  \cf6 \strokec6 0\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3             lastClaimTimes\cf7 \strokec7 [\cf4 \strokec4 account\cf7 \strokec7 ]\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf11 \strokec11 block\cf7 \strokec7 .\cf4 \strokec4 timestamp\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 emit\cf4 \strokec4  Claim\cf7 \strokec7 (\cf4 \strokec4 account\cf7 \strokec7 ,\cf4 \strokec4  amount\cf7 \strokec7 ,\cf4 \strokec4  automatic\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3             \cf10 \strokec10 return\cf4 \strokec4  \cf5 \strokec5 true\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3         \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3         \cf10 \strokec10 return\cf4 \strokec4  \cf5 \strokec5 false\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 contract\cf4 \strokec4  PiinkBox \cf5 \strokec5 is\cf4 \strokec4  ERC20\cf7 \strokec7 ,\cf4 \strokec4  Ownable \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3     \cf5 \strokec5 using\cf4 \strokec4  Address \cf17 \strokec17 for\cf4 \strokec4  \cf5 \strokec5 address\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 using\cf4 \strokec4  Address \cf17 \strokec17 for\cf4 \strokec4  \cf5 \strokec5 address\cf4 \strokec4  \cf8 \strokec8 payable\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 uint256\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4   liquidityFeeOnBuy\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 uint256\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4   liquidityFeeOnSell\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 uint256\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4   rewardFeeOnBuy\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 uint256\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4   rewardFeeOnSell\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 uint256\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4   TeamMarketingFeeOnBuy\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 uint256\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4   TeamMarketingFeeOnSell\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 uint256\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  TreasuryFeeOnBuy\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 uint256\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  TreasuryFeeOnSell\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 uint256\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  autoBurnFeeOnBuy\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 uint256\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  autoBurnFeeOnSell\cf7 \strokec7 ;\cf4 \strokec4  \cb1 \
\
\cb3     \cf5 \strokec5 uint256\cf4 \strokec4  \cf8 \strokec8 private\cf4 \strokec4  _totalFeesOnBuy\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 uint256\cf4 \strokec4  \cf8 \strokec8 private\cf4 \strokec4  _totalFeesOnSell\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 address\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  TeamMarketingWallet\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 address\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  TreasuryWallet\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\
\cb3     IUniswapV2Router02 \cf8 \strokec8 public\cf4 \strokec4  uniswapV2Router\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 address\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4   uniswapV2Pair\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cb1 \
\cb3     \cf5 \strokec5 address\cf4 \strokec4  \cf8 \strokec8 private\cf4 \strokec4  DEAD\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 bool\cf4 \strokec4     \cf8 \strokec8 private\cf4 \strokec4  swapping\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 uint256\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  swapTokensAtAmount\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\
\
\cb3     \cf5 \strokec5 mapping\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  => \cf5 \strokec5 bool\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 private\cf4 \strokec4  _isExcludedFromFees\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\
\cb3     DividendTracker \cf8 \strokec8 public\cf4 \strokec4  dividendTracker\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 address\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  rewardToken\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 uint256\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  gasForProcessing\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 event\cf4 \strokec4  ExcludeFromFees\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  \cf13 \strokec13 indexed\cf4 \strokec4  account\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 bool\cf4 \strokec4  isExcluded\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 event\cf4 \strokec4  ExcludedFromMaxWalletLimit\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  \cf13 \strokec13 indexed\cf4 \strokec4  account\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 bool\cf4 \strokec4  isExcluded\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 event\cf4 \strokec4  TeamMarketingWalletChanged\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  TeamMarketingWallet\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 event\cf4 \strokec4  TreasuryWalletChanged\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  TreasuryWallet\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 event\cf4 \strokec4  MaxWalletLimitAmountChanged\cf7 \strokec7 (\cf5 \strokec5 uint256\cf4 \strokec4  maxWalletLimitRate\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 event\cf4 \strokec4  MaxWalletLimitStateChanged\cf7 \strokec7 (\cf5 \strokec5 bool\cf4 \strokec4  maxWalletLimit\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 event\cf4 \strokec4  SwapAndLiquify\cf7 \strokec7 (\cf5 \strokec5 uint256\cf4 \strokec4  tokensSwapped\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint256\cf4 \strokec4  bnbReceived\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint256\cf4 \strokec4  tokensIntoLiqudity\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 event\cf4 \strokec4  SendTeamMarketing\cf7 \strokec7 (\cf5 \strokec5 uint256\cf4 \strokec4  bnbSend\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 event\cf4 \strokec4  SendTreasury\cf7 \strokec7 (\cf5 \strokec5 uint256\cf4 \strokec4  bnbSend\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 event\cf4 \strokec4  UpdateDividendTracker\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  \cf13 \strokec13 indexed\cf4 \strokec4  newAddress\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 address\cf4 \strokec4  \cf13 \strokec13 indexed\cf4 \strokec4  oldAddress\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 event\cf4 \strokec4  GasForProcessingUpdated\cf7 \strokec7 (\cf5 \strokec5 uint256\cf4 \strokec4  \cf13 \strokec13 indexed\cf4 \strokec4  newValue\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint256\cf4 \strokec4  \cf13 \strokec13 indexed\cf4 \strokec4  oldValue\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 event\cf4 \strokec4  SwapTokensAtAmountUpdated\cf7 \strokec7 (\cf5 \strokec5 uint256\cf4 \strokec4  swapTokensAtAmount\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 event\cf4 \strokec4  SendDividends\cf7 \strokec7 (\cf5 \strokec5 uint256\cf4 \strokec4  amount\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 event\cf4 \strokec4  ProcessedDividendTracker\cf7 \strokec7 (\cf5 \strokec5 uint256\cf4 \strokec4  iterations\cf7 \strokec7 ,\cf5 \strokec5 uint256\cf4 \strokec4  claims\cf7 \strokec7 ,\cf5 \strokec5 uint256\cf4 \strokec4  lastProcessedIndex\cf7 \strokec7 ,\cf5 \strokec5 bool\cf4 \strokec4  \cf13 \strokec13 indexed\cf4 \strokec4  automatic\cf7 \strokec7 ,\cf5 \strokec5 uint256\cf4 \strokec4  gas\cf7 \strokec7 ,\cf5 \strokec5 address\cf4 \strokec4  \cf13 \strokec13 indexed\cf4 \strokec4  processor\cb1 \
\cb3     \cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\
\
\cb3     \cf14 \strokec14 constructor\cf7 \strokec7 ()\cf4 \strokec4  ERC20\cf7 \strokec7 (\cf15 \strokec15 "PiinkBox"\cf7 \strokec7 ,\cf4 \strokec4  \cf15 \strokec15 "PIINKBOX"\cf7 \strokec7 )\cf4 \strokec4  \cb1 \
\cb3     \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         rewardToken \cf7 \strokec7 =\cf4 \strokec4  \cf16 \strokec16 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\
\cb3         \cf5 \strokec5 address\cf4 \strokec4  newOwner \cf7 \strokec7 =\cf4 \strokec4  \cf16 \strokec16 0x9046C2439566D3f4af8d34eE04b9BFB95c8D079b\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3         transferOwnership\cf7 \strokec7 (\cf4 \strokec4 newOwner\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\
\cb3         _mint\cf7 \strokec7 (\cf4 \strokec4 owner\cf7 \strokec7 (),\cf4 \strokec4  \cf6 \strokec6 1e12\cf4 \strokec4  \cf7 \strokec7 *\cf4 \strokec4  \cf7 \strokec7 (\cf6 \strokec6 10\cf4 \strokec4  ** \cf6 \strokec6 18\cf7 \strokec7 ));\cf4 \cb1 \strokec4 \
\cb3         swapTokensAtAmount \cf7 \strokec7 =\cf4 \strokec4  totalSupply\cf7 \strokec7 ()\cf4 \strokec4  \cf7 \strokec7 /\cf4 \strokec4  \cf6 \strokec6 5000\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\
\cb3         dividendTracker \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 new\cf4 \strokec4  DividendTracker\cf7 \strokec7 (\cf6 \strokec6 1\cf4 \strokec4 _000_000\cf7 \strokec7 ,\cf4 \strokec4  rewardToken\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\
\cb3         \cf5 \strokec5 address\cf4 \strokec4  router\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3         \cf13 \strokec13 if\cf4 \strokec4  \cf7 \strokec7 (\cf11 \strokec11 block\cf7 \strokec7 .\cf4 \strokec4 chainid \cf7 \strokec7 ==\cf4 \strokec4  \cf6 \strokec6 56\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3             router \cf7 \strokec7 =\cf4 \strokec4  \cf16 \strokec16 0x10ED43C718714eb63d5aA57B78B54704E256024E\cf7 \strokec7 ;\cf4 \strokec4  \cb1 \
\cb3         \cf7 \strokec7 \}\cf4 \strokec4  \cf13 \strokec13 else\cf4 \strokec4  \cf13 \strokec13 if\cf4 \strokec4  \cf7 \strokec7 (\cf11 \strokec11 block\cf7 \strokec7 .\cf4 \strokec4 chainid \cf7 \strokec7 ==\cf4 \strokec4  \cf6 \strokec6 97\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3             router \cf7 \strokec7 =\cf4 \strokec4   \cf16 \strokec16 0xD99D1c33F9fC3444f8101754aBC46c52416550D1\cf7 \strokec7 ;\cf4 \strokec4  \cb1 \
\cb3         \cf7 \strokec7 \}\cf4 \strokec4  \cf13 \strokec13 else\cf4 \strokec4  \cf13 \strokec13 if\cf4 \strokec4  \cf7 \strokec7 (\cf11 \strokec11 block\cf7 \strokec7 .\cf4 \strokec4 chainid \cf7 \strokec7 ==\cf4 \strokec4  \cf6 \strokec6 1\cf4 \strokec4  \cf7 \strokec7 ||\cf4 \strokec4  \cf11 \strokec11 block\cf7 \strokec7 .\cf4 \strokec4 chainid \cf7 \strokec7 ==\cf4 \strokec4  \cf6 \strokec6 5\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3             router \cf7 \strokec7 =\cf4 \strokec4  \cf16 \strokec16 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\cf7 \strokec7 ;\cf4 \strokec4  \cb1 \
\cb3         \cf7 \strokec7 \}\cf4 \strokec4  \cf13 \strokec13 else\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3             \cf11 \strokec11 revert\cf7 \strokec7 ();\cf4 \cb1 \strokec4 \
\cb3         \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3         IUniswapV2Router02 _uniswapV2Router \cf7 \strokec7 =\cf4 \strokec4  IUniswapV2Router02\cf7 \strokec7 (\cf4 \strokec4 router\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 address\cf4 \strokec4  _uniswapV2Pair \cf7 \strokec7 =\cf4 \strokec4  IUniswapV2Factory\cf7 \strokec7 (\cf4 \strokec4 _uniswapV2Router\cf7 \strokec7 .\cf4 \strokec4 factory\cf7 \strokec7 ())\cf4 \cb1 \strokec4 \
\cb3             \cf7 \strokec7 .\cf4 \strokec4 createPair\cf7 \strokec7 (\cf5 \strokec5 address\cf7 \strokec7 (\cf9 \strokec9 this\cf7 \strokec7 ),\cf4 \strokec4  _uniswapV2Router\cf7 \strokec7 .\cf4 \strokec4 WETH\cf7 \strokec7 ());\cf4 \cb1 \strokec4 \
\
\cb3         uniswapV2Router \cf7 \strokec7 =\cf4 \strokec4  _uniswapV2Router\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3         uniswapV2Pair   \cf7 \strokec7 =\cf4 \strokec4  _uniswapV2Pair\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\
\cb3         _approve\cf7 \strokec7 (\cf5 \strokec5 address\cf7 \strokec7 (\cf9 \strokec9 this\cf7 \strokec7 ),\cf4 \strokec4  \cf5 \strokec5 address\cf7 \strokec7 (\cf4 \strokec4 uniswapV2Router\cf7 \strokec7 ),\cf4 \strokec4  \cf5 \strokec5 type\cf7 \strokec7 (\cf5 \strokec5 uint256\cf7 \strokec7 ).\cf4 \strokec4 max\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\
\cb3         maxWalletLimitEnabled \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 true\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3         maxWalletAmount \cf7 \strokec7 =\cf4 \strokec4  totalSupply\cf7 \strokec7 ()\cf4 \strokec4  \cf7 \strokec7 /\cf4 \strokec4  \cf6 \strokec6 50\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\
\cb3         liquidityFeeOnBuy   \cf7 \strokec7 =\cf4 \strokec4  \cf6 \strokec6 1\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3         liquidityFeeOnSell  \cf7 \strokec7 =\cf4 \strokec4  \cf6 \strokec6 1\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\
\cb3         rewardFeeOnBuy      \cf7 \strokec7 =\cf4 \strokec4  \cf6 \strokec6 1\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3         rewardFeeOnSell     \cf7 \strokec7 =\cf4 \strokec4  \cf6 \strokec6 1\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\
\cb3         TeamMarketingFeeOnBuy   \cf7 \strokec7 =\cf4 \strokec4  \cf6 \strokec6 1\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3         TeamMarketingFeeOnSell  \cf7 \strokec7 =\cf4 \strokec4  \cf6 \strokec6 1\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\
\cb3         TreasuryFeeOnBuy      \cf7 \strokec7 =\cf4 \strokec4  \cf6 \strokec6 1\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3         TreasuryFeeOnSell     \cf7 \strokec7 =\cf4 \strokec4  \cf6 \strokec6 1\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\
\cb3         autoBurnFeeOnBuy     \cf7 \strokec7 =\cf4 \strokec4  \cf6 \strokec6 2\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3         autoBurnFeeOnSell    \cf7 \strokec7 =\cf4 \strokec4  \cf6 \strokec6 2\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\
\cb3         _totalFeesOnBuy \cf7 \strokec7 =\cf4 \strokec4  \cf6 \strokec6 6\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3         _totalFeesOnSell \cf7 \strokec7 =\cf4 \strokec4  \cf6 \strokec6 6\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\
\cb3         TeamMarketingWallet \cf7 \strokec7 =\cf4 \strokec4  \cf16 \strokec16 0x78f104d47c7F8776D27857E547965566321e6693\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3         TreasuryWallet \cf7 \strokec7 =\cf4 \strokec4  \cf16 \strokec16 0x7b76FD6eA82308700F1250C7041B1BC52BD015dd\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\
\cb3         \cb1 \
\cb3         gasForProcessing \cf7 \strokec7 =\cf4 \strokec4  \cf6 \strokec6 300000\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\
\cb3         DEAD \cf7 \strokec7 =\cf4 \strokec4  \cf16 \strokec16 0x000000000000000000000000000000000000dEaD\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\
\cb3         dividendTracker\cf7 \strokec7 .\cf4 \strokec4 excludeFromDividends\cf7 \strokec7 (\cf5 \strokec5 address\cf7 \strokec7 (\cf4 \strokec4 dividendTracker\cf7 \strokec7 ));\cf4 \cb1 \strokec4 \
\cb3         dividendTracker\cf7 \strokec7 .\cf4 \strokec4 excludeFromDividends\cf7 \strokec7 (\cf5 \strokec5 address\cf7 \strokec7 (\cf9 \strokec9 this\cf7 \strokec7 ));\cf4 \cb1 \strokec4 \
\cb3         dividendTracker\cf7 \strokec7 .\cf4 \strokec4 excludeFromDividends\cf7 \strokec7 (\cf4 \strokec4 DEAD\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3         dividendTracker\cf7 \strokec7 .\cf4 \strokec4 excludeFromDividends\cf7 \strokec7 (\cf5 \strokec5 address\cf7 \strokec7 (\cf4 \strokec4 _uniswapV2Router\cf7 \strokec7 ));\cf4 \cb1 \strokec4 \
\cb3         dividendTracker\cf7 \strokec7 .\cf4 \strokec4 excludeFromDividends\cf7 \strokec7 (\cf5 \strokec5 address\cf7 \strokec7 (\cf4 \strokec4 uniswapV2Pair\cf7 \strokec7 ));\cf4 \cb1 \strokec4 \
\cb3         \cb1 \
\cb3         _isExcludedFromMaxWalletLimit\cf7 \strokec7 [\cf4 \strokec4 owner\cf7 \strokec7 ()]\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 true\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3         _isExcludedFromMaxWalletLimit\cf7 \strokec7 [\cf5 \strokec5 address\cf7 \strokec7 (\cf6 \strokec6 0\cf7 \strokec7 )]\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 true\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3         _isExcludedFromMaxWalletLimit\cf7 \strokec7 [\cf5 \strokec5 address\cf7 \strokec7 (\cf9 \strokec9 this\cf7 \strokec7 )]\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 true\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3         _isExcludedFromMaxWalletLimit\cf7 \strokec7 [\cf4 \strokec4 DEAD\cf7 \strokec7 ]\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 true\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\
\cb3         _isExcludedFromFees\cf7 \strokec7 [\cf4 \strokec4 owner\cf7 \strokec7 ()]\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 true\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3         _isExcludedFromFees\cf7 \strokec7 [\cf4 \strokec4 DEAD\cf7 \strokec7 ]\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 true\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3         _isExcludedFromFees\cf7 \strokec7 [\cf5 \strokec5 address\cf7 \strokec7 (\cf9 \strokec9 this\cf7 \strokec7 )]\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 true\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf14 \strokec14 receive\cf7 \strokec7 ()\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf8 \strokec8 payable\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  claimStuckTokens\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  token\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  onlyOwner \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf11 \strokec11 require\cf7 \strokec7 (\cf4 \strokec4 token \cf7 \strokec7 !=\cf4 \strokec4  \cf5 \strokec5 address\cf7 \strokec7 (\cf9 \strokec9 this\cf7 \strokec7 ),\cf4 \strokec4  \cf15 \strokec15 "Owner cannot claim native tokens"\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3         \cf13 \strokec13 if\cf4 \strokec4  \cf7 \strokec7 (\cf4 \strokec4 token \cf7 \strokec7 ==\cf4 \strokec4  \cf5 \strokec5 address\cf7 \strokec7 (\cf16 \strokec16 0x0\cf7 \strokec7 ))\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3             \cf8 \strokec8 payable\cf7 \strokec7 (\cf11 \strokec11 msg\cf7 \strokec7 .\cf4 \strokec4 sender\cf7 \strokec7 ).\cf4 \strokec4 transfer\cf7 \strokec7 (\cf5 \strokec5 address\cf7 \strokec7 (\cf9 \strokec9 this\cf7 \strokec7 ).\cf4 \strokec4 balance\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3             \cf10 \strokec10 return\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3         \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\cb3         IERC20 ERC20token \cf7 \strokec7 =\cf4 \strokec4  IERC20\cf7 \strokec7 (\cf4 \strokec4 token\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 uint256\cf4 \strokec4  balance \cf7 \strokec7 =\cf4 \strokec4  ERC20token\cf7 \strokec7 .\cf4 \strokec4 balanceOf\cf7 \strokec7 (\cf5 \strokec5 address\cf7 \strokec7 (\cf9 \strokec9 this\cf7 \strokec7 ));\cf4 \cb1 \strokec4 \
\cb3         ERC20token\cf7 \strokec7 .\cf4 \strokec4 transfer\cf7 \strokec7 (\cf11 \strokec11 msg\cf7 \strokec7 .\cf4 \strokec4 sender\cf7 \strokec7 ,\cf4 \strokec4  balance\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf2 \strokec2 //=======FeeManagement=======//\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 function\cf4 \strokec4  excludeFromFees\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  account\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 bool\cf4 \strokec4  excluded\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  onlyOwner \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf11 \strokec11 require\cf7 \strokec7 (\cf4 \strokec4 _isExcludedFromFees\cf7 \strokec7 [\cf4 \strokec4 account\cf7 \strokec7 ]\cf4 \strokec4  \cf7 \strokec7 !=\cf4 \strokec4  excluded\cf7 \strokec7 ,\cf4 \strokec4  \cf15 \strokec15 "Account is already the value of 'excluded'"\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3         _isExcludedFromFees\cf7 \strokec7 [\cf4 \strokec4 account\cf7 \strokec7 ]\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  excluded\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\
\cb3         \cf5 \strokec5 emit\cf4 \strokec4  ExcludeFromFees\cf7 \strokec7 (\cf4 \strokec4 account\cf7 \strokec7 ,\cf4 \strokec4  excluded\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  isExcludedFromFees\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  account\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf10 \strokec10 returns\cf7 \strokec7 (\cf5 \strokec5 bool\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf10 \strokec10 return\cf4 \strokec4  _isExcludedFromFees\cf7 \strokec7 [\cf4 \strokec4 account\cf7 \strokec7 ];\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  changeTeamMarketingWallet\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  _TeamMarketingWallet\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  onlyOwner \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf11 \strokec11 require\cf7 \strokec7 (\cf4 \strokec4 _TeamMarketingWallet \cf7 \strokec7 !=\cf4 \strokec4  TeamMarketingWallet\cf7 \strokec7 ,\cf4 \strokec4  \cf15 \strokec15 "TeamMarketing wallet is already that address"\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3         \cf11 \strokec11 require\cf7 \strokec7 (\cf4 \strokec4 _TeamMarketingWallet \cf7 \strokec7 !=\cf4 \strokec4  \cf5 \strokec5 address\cf7 \strokec7 (\cf6 \strokec6 0\cf7 \strokec7 ),\cf4 \strokec4  \cf15 \strokec15 "TeamMarketing wallet cannot be the zero address"\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3         TeamMarketingWallet \cf7 \strokec7 =\cf4 \strokec4  _TeamMarketingWallet\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 emit\cf4 \strokec4  TeamMarketingWalletChanged\cf7 \strokec7 (\cf4 \strokec4 TeamMarketingWallet\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  changeTreasuryWallet\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  _TreasuryWallet\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  onlyOwner \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf11 \strokec11 require\cf7 \strokec7 (\cf4 \strokec4 _TreasuryWallet \cf7 \strokec7 !=\cf4 \strokec4  TreasuryWallet\cf7 \strokec7 ,\cf4 \strokec4  \cf15 \strokec15 "Treasury wallet is already that address"\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3         \cf11 \strokec11 require\cf7 \strokec7 (\cf4 \strokec4 _TreasuryWallet \cf7 \strokec7 !=\cf4 \strokec4  \cf5 \strokec5 address\cf7 \strokec7 (\cf6 \strokec6 0\cf7 \strokec7 ),\cf4 \strokec4  \cf15 \strokec15 "Treasury wallet cannot be the zero address"\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3         TreasuryWallet \cf7 \strokec7 =\cf4 \strokec4  _TreasuryWallet\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 emit\cf4 \strokec4  TreasuryWalletChanged\cf7 \strokec7 (\cf4 \strokec4 TreasuryWallet\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  _transfer\cf7 \strokec7 (\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 address\cf4 \strokec4  from\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 address\cf4 \strokec4  to\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 uint256\cf4 \strokec4  amount\cb1 \
\cb3     \cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 internal\cf4 \strokec4  \cf18 \strokec18 override\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf11 \strokec11 require\cf7 \strokec7 (\cf4 \strokec4 from \cf7 \strokec7 !=\cf4 \strokec4  \cf5 \strokec5 address\cf7 \strokec7 (\cf6 \strokec6 0\cf7 \strokec7 ),\cf4 \strokec4  \cf15 \strokec15 "ERC20: transfer from the zero address"\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3         \cf11 \strokec11 require\cf7 \strokec7 (\cf4 \strokec4 to \cf7 \strokec7 !=\cf4 \strokec4  \cf5 \strokec5 address\cf7 \strokec7 (\cf6 \strokec6 0\cf7 \strokec7 ),\cf4 \strokec4  \cf15 \strokec15 "ERC20: transfer to the zero address"\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\
\cb3         \cf13 \strokec13 if\cf7 \strokec7 (\cf4 \strokec4 amount \cf7 \strokec7 ==\cf4 \strokec4  \cf6 \strokec6 0\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3             \cf9 \strokec9 super\cf7 \strokec7 .\cf4 \strokec4 _transfer\cf7 \strokec7 (\cf4 \strokec4 from\cf7 \strokec7 ,\cf4 \strokec4  to\cf7 \strokec7 ,\cf4 \strokec4  \cf6 \strokec6 0\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3             \cf10 \strokec10 return\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3         \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3         \cf5 \strokec5 uint256\cf4 \strokec4  contractTokenBalance \cf7 \strokec7 =\cf4 \strokec4  balanceOf\cf7 \strokec7 (\cf5 \strokec5 address\cf7 \strokec7 (\cf9 \strokec9 this\cf7 \strokec7 ));\cf4 \cb1 \strokec4 \
\
\cb3         \cf5 \strokec5 bool\cf4 \strokec4  canSwap \cf7 \strokec7 =\cf4 \strokec4  contractTokenBalance \cf7 \strokec7 >=\cf4 \strokec4  swapTokensAtAmount\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\
\cb3         \cf13 \strokec13 if\cf7 \strokec7 (\cf4 \strokec4  canSwap \cf7 \strokec7 &&\cf4 \cb1 \strokec4 \
\cb3             \cf7 \strokec7 !\cf4 \strokec4 swapping \cf7 \strokec7 &&\cf4 \cb1 \strokec4 \
\cb3             to \cf7 \strokec7 ==\cf4 \strokec4  uniswapV2Pair\cb1 \
\cb3         \cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3             swapping \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 true\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3             contractTokenBalance \cf7 \strokec7 =\cf4 \strokec4  swapTokensAtAmount\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\
\
\
\cb3             \cf5 \strokec5 uint256\cf4 \strokec4  liquidityShare \cf7 \strokec7 =\cf4 \strokec4  liquidityFeeOnBuy \cf7 \strokec7 +\cf4 \strokec4  liquidityFeeOnSell\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 uint256\cf4 \strokec4  TeamMarketingShare \cf7 \strokec7 =\cf4 \strokec4  TeamMarketingFeeOnBuy \cf7 \strokec7 +\cf4 \strokec4  TeamMarketingFeeOnSell\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 uint256\cf4 \strokec4  rewardShare    \cf7 \strokec7 =\cf4 \strokec4  rewardFeeOnBuy    \cf7 \strokec7 +\cf4 \strokec4  rewardFeeOnSell\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 uint256\cf4 \strokec4  TreasuryShare   \cf7 \strokec7 =\cf4 \strokec4  TreasuryFeeOnBuy   \cf7 \strokec7 +\cf4 \strokec4  TreasuryFeeOnSell\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 uint256\cf4 \strokec4  totalShare \cf7 \strokec7 =\cf4 \strokec4  liquidityShare \cf7 \strokec7 +\cf4 \strokec4  TeamMarketingShare \cf7 \strokec7 +\cf4 \strokec4  rewardShare \cf7 \strokec7 +\cf4 \strokec4  TreasuryShare \cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\
\cb3             \cf5 \strokec5 uint256\cf4 \strokec4  liquidityTokens\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\
\cb3             \cf13 \strokec13 if\cf7 \strokec7 (\cf4 \strokec4 liquidityShare \cf7 \strokec7 >\cf4 \strokec4  \cf6 \strokec6 0\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3                 liquidityTokens \cf7 \strokec7 =\cf4 \strokec4  contractTokenBalance \cf7 \strokec7 *\cf4 \strokec4  liquidityShare \cf7 \strokec7 /\cf4 \strokec4  totalShare\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3                 swapAndLiquify\cf7 \strokec7 (\cf4 \strokec4 liquidityTokens\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3             \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3             contractTokenBalance \cf7 \strokec7 -=\cf4 \strokec4  liquidityTokens\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 uint256\cf4 \strokec4  bnbShare \cf7 \strokec7 =\cf4 \strokec4  TeamMarketingShare \cf7 \strokec7 +\cf4 \strokec4  rewardShare \cf7 \strokec7 +\cf4 \strokec4  TreasuryShare\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3             \cb1 \
\cb3             \cf13 \strokec13 if\cf7 \strokec7 (\cf4 \strokec4 contractTokenBalance \cf7 \strokec7 >\cf4 \strokec4  \cf6 \strokec6 0\cf4 \strokec4  \cf7 \strokec7 &&\cf4 \strokec4  bnbShare \cf7 \strokec7 >\cf4 \strokec4  \cf6 \strokec6 0\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3                 \cf5 \strokec5 uint256\cf4 \strokec4  initialBalance \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 address\cf7 \strokec7 (\cf9 \strokec9 this\cf7 \strokec7 ).\cf4 \strokec4 balance\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\
\cb3                 \cf5 \strokec5 address\cf7 \strokec7 []\cf4 \strokec4  \cf12 \strokec12 memory\cf4 \strokec4  path \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 new\cf4 \strokec4  \cf5 \strokec5 address\cf7 \strokec7 [](\cf6 \strokec6 2\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3                 path\cf7 \strokec7 [\cf6 \strokec6 0\cf7 \strokec7 ]\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 address\cf7 \strokec7 (\cf9 \strokec9 this\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3                 path\cf7 \strokec7 [\cf6 \strokec6 1\cf7 \strokec7 ]\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  uniswapV2Router\cf7 \strokec7 .\cf4 \strokec4 WETH\cf7 \strokec7 ();\cf4 \cb1 \strokec4 \
\
\cb3                 uniswapV2Router\cf7 \strokec7 .\cf4 \strokec4 swapExactTokensForETHSupportingFeeOnTransferTokens\cf7 \strokec7 (\cf4 \cb1 \strokec4 \
\cb3                     contractTokenBalance\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3                     \cf6 \strokec6 0\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3                     path\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3                     \cf5 \strokec5 address\cf7 \strokec7 (\cf9 \strokec9 this\cf7 \strokec7 ),\cf4 \cb1 \strokec4 \
\cb3                     \cf11 \strokec11 block\cf7 \strokec7 .\cf4 \strokec4 timestamp\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3                 \cb1 \
\cb3                 \cf5 \strokec5 uint256\cf4 \strokec4  newBalance \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 address\cf7 \strokec7 (\cf9 \strokec9 this\cf7 \strokec7 ).\cf4 \strokec4 balance \cf7 \strokec7 -\cf4 \strokec4  initialBalance\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\
\cb3                 \cf13 \strokec13 if\cf7 \strokec7 (\cf4 \strokec4 TeamMarketingShare \cf7 \strokec7 >\cf4 \strokec4  \cf6 \strokec6 0\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3                     \cf5 \strokec5 uint256\cf4 \strokec4  TeamMarketingBNB \cf7 \strokec7 =\cf4 \strokec4  newBalance \cf7 \strokec7 *\cf4 \strokec4  TeamMarketingShare \cf7 \strokec7 /\cf4 \strokec4  bnbShare\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3                     \cf8 \strokec8 payable\cf7 \strokec7 (\cf4 \strokec4 TeamMarketingWallet\cf7 \strokec7 ).\cf4 \strokec4 sendValue\cf7 \strokec7 (\cf4 \strokec4 TeamMarketingBNB\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3                     \cf5 \strokec5 emit\cf4 \strokec4  SendTeamMarketing\cf7 \strokec7 (\cf4 \strokec4 TeamMarketingBNB\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3                 \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\cb3                 \cf13 \strokec13 if\cf7 \strokec7 (\cf4 \strokec4 TreasuryShare \cf7 \strokec7 >\cf4 \strokec4  \cf6 \strokec6 0\cf7 \strokec7 )\{\cf4 \cb1 \strokec4 \
\cb3                     \cf5 \strokec5 uint256\cf4 \strokec4  TreasuryBNB \cf7 \strokec7 =\cf4 \strokec4  newBalance \cf7 \strokec7 *\cf4 \strokec4  TreasuryShare \cf7 \strokec7 /\cf4 \strokec4  bnbShare\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3                     \cf8 \strokec8 payable\cf7 \strokec7 (\cf4 \strokec4 TreasuryWallet\cf7 \strokec7 ).\cf4 \strokec4 sendValue\cf7 \strokec7 (\cf4 \strokec4 TreasuryBNB\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3                     \cf5 \strokec5 emit\cf4 \strokec4  SendTreasury\cf7 \strokec7 (\cf4 \strokec4 TreasuryBNB\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3                 \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\cb3                 \cf13 \strokec13 if\cf7 \strokec7 (\cf4 \strokec4 rewardShare \cf7 \strokec7 >\cf4 \strokec4  \cf6 \strokec6 0\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3                     \cf5 \strokec5 uint256\cf4 \strokec4  rewardBNB \cf7 \strokec7 =\cf4 \strokec4  newBalance \cf7 \strokec7 *\cf4 \strokec4  rewardShare \cf7 \strokec7 /\cf4 \strokec4  bnbShare\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3                     swapAndSendDividends\cf7 \strokec7 (\cf4 \strokec4 rewardBNB\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3                 \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\cb3             \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3             swapping \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 false\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3         \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3         \cf5 \strokec5 uint256\cf4 \strokec4  _totalFees\cf7 \strokec7 ;\cf4 \strokec4         \cb1 \
\cb3         \cf5 \strokec5 uint256\cf4 \strokec4  burnTaxShare\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\
\cb3         \cf13 \strokec13 if\cf7 \strokec7 (((\cf4 \strokec4 _isExcludedFromFees\cf7 \strokec7 [\cf4 \strokec4 from\cf7 \strokec7 ]\cf4 \strokec4  \cf7 \strokec7 ||\cf4 \strokec4  _isExcludedFromFees\cf7 \strokec7 [\cf4 \strokec4 to\cf7 \strokec7 ])\cf4 \strokec4  \cf7 \strokec7 ||\cf4 \strokec4  \cf7 \strokec7 (\cf4 \strokec4 from \cf7 \strokec7 !=\cf4 \strokec4  uniswapV2Pair \cf7 \strokec7 &&\cf4 \strokec4  to \cf7 \strokec7 !=\cf4 \strokec4  uniswapV2Pair\cf7 \strokec7 ))\cf4 \strokec4  \cf7 \strokec7 ||\cf4 \strokec4  swapping\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3             _totalFees \cf7 \strokec7 =\cf4 \strokec4  \cf6 \strokec6 0\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3         \cf7 \strokec7 \}\cf13 \strokec13 else\cf4 \strokec4  \cf13 \strokec13 if\cf7 \strokec7 (\cf4 \strokec4 from \cf7 \strokec7 ==\cf4 \strokec4  uniswapV2Pair\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3             _totalFees \cf7 \strokec7 =\cf4 \strokec4  _totalFeesOnBuy\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3             burnTaxShare \cf7 \strokec7 =\cf4 \strokec4  autoBurnFeeOnBuy\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3         \cf7 \strokec7 \}\cf4 \strokec4  \cf13 \strokec13 else\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3             _totalFees \cf7 \strokec7 =\cf4 \strokec4  _totalFeesOnSell\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3             burnTaxShare \cf7 \strokec7 =\cf4 \strokec4  autoBurnFeeOnSell\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3         \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\cb3         \cf13 \strokec13 if\cf7 \strokec7 (\cf4 \strokec4  _totalFees \cf7 \strokec7 >\cf4 \strokec4  \cf6 \strokec6 0\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 uint256\cf4 \strokec4  fees \cf7 \strokec7 =\cf4 \strokec4  \cf7 \strokec7 (\cf4 \strokec4 amount \cf7 \strokec7 *\cf4 \strokec4  _totalFees\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 /\cf4 \strokec4  \cf6 \strokec6 100\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3             amount \cf7 \strokec7 -=\cf4 \strokec4  fees\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\
\cb3             \cf13 \strokec13 if\cf4 \strokec4  \cf7 \strokec7 (\cf4 \strokec4 burnTaxShare \cf7 \strokec7 >\cf4 \strokec4  \cf6 \strokec6 0\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3                 \cf5 \strokec5 uint256\cf4 \strokec4  burnAmount \cf7 \strokec7 =\cf4 \strokec4  \cf7 \strokec7 (\cf4 \strokec4 fees \cf7 \strokec7 *\cf4 \strokec4  burnTaxShare\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 /\cf4 \strokec4  _totalFees\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3                 fees \cf7 \strokec7 -=\cf4 \strokec4  burnAmount\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3                 \cf9 \strokec9 super\cf7 \strokec7 .\cf4 \strokec4 _transfer\cf7 \strokec7 (\cf4 \strokec4 from\cf7 \strokec7 ,\cf4 \strokec4  DEAD\cf7 \strokec7 ,\cf4 \strokec4  burnAmount\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3         \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\cb3             \cf9 \strokec9 super\cf7 \strokec7 .\cf4 \strokec4 _transfer\cf7 \strokec7 (\cf4 \strokec4 from\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 address\cf7 \strokec7 (\cf9 \strokec9 this\cf7 \strokec7 ),\cf4 \strokec4  fees\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3         \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\
\cb3         \cf13 \strokec13 if\cf4 \strokec4  \cf7 \strokec7 (\cf4 \strokec4 maxWalletLimitEnabled\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3             \cf13 \strokec13 if\cf4 \strokec4  \cf7 \strokec7 (\cf4 \strokec4 _isExcludedFromMaxWalletLimit\cf7 \strokec7 [\cf4 \strokec4 from\cf7 \strokec7 ]\cf4 \strokec4   \cf7 \strokec7 ==\cf4 \strokec4  \cf5 \strokec5 false\cf4 \strokec4  \cf7 \strokec7 &&\cf4 \strokec4  \cb1 \
\cb3                 _isExcludedFromMaxWalletLimit\cf7 \strokec7 [\cf4 \strokec4 to\cf7 \strokec7 ]\cf4 \strokec4     \cf7 \strokec7 ==\cf4 \strokec4  \cf5 \strokec5 false\cf4 \strokec4  \cf7 \strokec7 &&\cf4 \cb1 \strokec4 \
\cb3                 to \cf7 \strokec7 !=\cf4 \strokec4  uniswapV2Pair\cb1 \
\cb3             \cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3                 \cf5 \strokec5 uint\cf4 \strokec4  balance  \cf7 \strokec7 =\cf4 \strokec4  balanceOf\cf7 \strokec7 (\cf4 \strokec4 to\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3                 \cf11 \strokec11 require\cf7 \strokec7 (\cf4 \cb1 \strokec4 \
\cb3                     balance \cf7 \strokec7 +\cf4 \strokec4  amount \cf7 \strokec7 <=\cf4 \strokec4  maxWalletAmount\cf7 \strokec7 ,\cf4 \strokec4  \cb1 \
\cb3                     \cf15 \strokec15 "MaxWallet: Recipient exceeds the maxWalletAmount"\cf4 \cb1 \strokec4 \
\cb3                 \cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3             \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\cb3         \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3         \cf9 \strokec9 super\cf7 \strokec7 .\cf4 \strokec4 _transfer\cf7 \strokec7 (\cf4 \strokec4 from\cf7 \strokec7 ,\cf4 \strokec4  to\cf7 \strokec7 ,\cf4 \strokec4  amount\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\
\cb3         \cf19 \strokec19 try\cf4 \strokec4  dividendTracker\cf7 \strokec7 .\cf4 \strokec4 setBalance\cf7 \strokec7 (\cf8 \strokec8 payable\cf7 \strokec7 (\cf4 \strokec4 from\cf7 \strokec7 ),\cf4 \strokec4  balanceOf\cf7 \strokec7 (\cf4 \strokec4 from\cf7 \strokec7 ))\cf4 \strokec4  \cf7 \strokec7 \{\}\cf4 \strokec4  \cf19 \strokec19 catch\cf4 \strokec4  \cf7 \strokec7 \{\}\cf4 \cb1 \strokec4 \
\cb3         \cf19 \strokec19 try\cf4 \strokec4  dividendTracker\cf7 \strokec7 .\cf4 \strokec4 setBalance\cf7 \strokec7 (\cf8 \strokec8 payable\cf7 \strokec7 (\cf4 \strokec4 to\cf7 \strokec7 ),\cf4 \strokec4  balanceOf\cf7 \strokec7 (\cf4 \strokec4 to\cf7 \strokec7 ))\cf4 \strokec4  \cf7 \strokec7 \{\}\cf4 \strokec4  \cf19 \strokec19 catch\cf4 \strokec4  \cf7 \strokec7 \{\}\cf4 \cb1 \strokec4 \
\
\cb3         \cf13 \strokec13 if\cf7 \strokec7 (!\cf4 \strokec4 swapping\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 uint256\cf4 \strokec4  gas \cf7 \strokec7 =\cf4 \strokec4  gasForProcessing\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\
\cb3             \cf19 \strokec19 try\cf4 \strokec4  dividendTracker\cf7 \strokec7 .\cf4 \strokec4 process\cf7 \strokec7 (\cf4 \strokec4 gas\cf7 \strokec7 )\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 uint256\cf4 \strokec4  iterations\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint256\cf4 \strokec4  claims\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint256\cf4 \strokec4  lastProcessedIndex\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3                 \cf5 \strokec5 emit\cf4 \strokec4  ProcessedDividendTracker\cf7 \strokec7 (\cf4 \strokec4 iterations\cf7 \strokec7 ,\cf4 \strokec4  claims\cf7 \strokec7 ,\cf4 \strokec4  lastProcessedIndex\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 true\cf7 \strokec7 ,\cf4 \strokec4  gas\cf7 \strokec7 ,\cf4 \strokec4  \cf11 \strokec11 tx\cf7 \strokec7 .\cf4 \strokec4 origin\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3             \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\cb3             \cf19 \strokec19 catch\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\
\cb3             \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\cb3         \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 //=======Swap=======//\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3     \cf5 \strokec5 function\cf4 \strokec4  swapAndLiquify\cf7 \strokec7 (\cf5 \strokec5 uint256\cf4 \strokec4  tokens\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 private\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 uint256\cf4 \strokec4  half \cf7 \strokec7 =\cf4 \strokec4  tokens \cf7 \strokec7 /\cf4 \strokec4  \cf6 \strokec6 2\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 uint256\cf4 \strokec4  otherHalf \cf7 \strokec7 =\cf4 \strokec4  tokens \cf7 \strokec7 -\cf4 \strokec4  half\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\
\cb3         \cf5 \strokec5 uint256\cf4 \strokec4  initialBalance \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 address\cf7 \strokec7 (\cf9 \strokec9 this\cf7 \strokec7 ).\cf4 \strokec4 balance\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\
\cb3         \cf5 \strokec5 address\cf7 \strokec7 []\cf4 \strokec4  \cf12 \strokec12 memory\cf4 \strokec4  path \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 new\cf4 \strokec4  \cf5 \strokec5 address\cf7 \strokec7 [](\cf6 \strokec6 2\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3         path\cf7 \strokec7 [\cf6 \strokec6 0\cf7 \strokec7 ]\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 address\cf7 \strokec7 (\cf9 \strokec9 this\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3         path\cf7 \strokec7 [\cf6 \strokec6 1\cf7 \strokec7 ]\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  uniswapV2Router\cf7 \strokec7 .\cf4 \strokec4 WETH\cf7 \strokec7 ();\cf4 \cb1 \strokec4 \
\
\cb3         uniswapV2Router\cf7 \strokec7 .\cf4 \strokec4 swapExactTokensForETHSupportingFeeOnTransferTokens\cf7 \strokec7 (\cf4 \cb1 \strokec4 \
\cb3             half\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3             \cf6 \strokec6 0\cf7 \strokec7 ,\cf4 \strokec4  \cf2 \strokec2 // accept any amount of ETH\cf4 \cb1 \strokec4 \
\cb3             path\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 address\cf7 \strokec7 (\cf9 \strokec9 this\cf7 \strokec7 ),\cf4 \cb1 \strokec4 \
\cb3             \cf11 \strokec11 block\cf7 \strokec7 .\cf4 \strokec4 timestamp\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3         \cb1 \
\cb3         \cf5 \strokec5 uint256\cf4 \strokec4  newBalance \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 address\cf7 \strokec7 (\cf9 \strokec9 this\cf7 \strokec7 ).\cf4 \strokec4 balance \cf7 \strokec7 -\cf4 \strokec4  initialBalance\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\
\cb3         uniswapV2Router\cf7 \strokec7 .\cf4 \strokec4 addLiquidityETH\cf7 \strokec7 \{\cf4 \strokec4 value\cf7 \strokec7 :\cf4 \strokec4  newBalance\cf7 \strokec7 \}(\cf4 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 address\cf7 \strokec7 (\cf9 \strokec9 this\cf7 \strokec7 ),\cf4 \cb1 \strokec4 \
\cb3             otherHalf\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3             \cf6 \strokec6 0\cf7 \strokec7 ,\cf4 \strokec4  \cf2 \strokec2 // slippage is unavoidable\cf4 \cb1 \strokec4 \
\cb3             \cf6 \strokec6 0\cf7 \strokec7 ,\cf4 \strokec4  \cf2 \strokec2 // slippage is unavoidable\cf4 \cb1 \strokec4 \
\cb3             DEAD\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3             \cf11 \strokec11 block\cf7 \strokec7 .\cf4 \strokec4 timestamp\cb1 \
\cb3         \cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\
\cb3         \cf5 \strokec5 emit\cf4 \strokec4  SwapAndLiquify\cf7 \strokec7 (\cf4 \strokec4 half\cf7 \strokec7 ,\cf4 \strokec4  newBalance\cf7 \strokec7 ,\cf4 \strokec4  otherHalf\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  swapAndSendDividends\cf7 \strokec7 (\cf5 \strokec5 uint256\cf4 \strokec4  amount\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 private\cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 address\cf7 \strokec7 []\cf4 \strokec4  \cf12 \strokec12 memory\cf4 \strokec4  path \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 new\cf4 \strokec4  \cf5 \strokec5 address\cf7 \strokec7 [](\cf6 \strokec6 2\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3         path\cf7 \strokec7 [\cf6 \strokec6 0\cf7 \strokec7 ]\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  uniswapV2Router\cf7 \strokec7 .\cf4 \strokec4 WETH\cf7 \strokec7 ();\cf4 \cb1 \strokec4 \
\cb3         path\cf7 \strokec7 [\cf6 \strokec6 1\cf7 \strokec7 ]\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  rewardToken\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\
\cb3         uniswapV2Router\cf7 \strokec7 .\cf4 \strokec4 swapExactETHForTokensSupportingFeeOnTransferTokens\cf7 \strokec7 \{\cf4 \strokec4 value\cf7 \strokec7 :\cf4 \strokec4  amount\cf7 \strokec7 \}(\cf4 \cb1 \strokec4 \
\cb3             \cf6 \strokec6 0\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3             path\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 address\cf7 \strokec7 (\cf9 \strokec9 this\cf7 \strokec7 ),\cf4 \cb1 \strokec4 \
\cb3             \cf11 \strokec11 block\cf7 \strokec7 .\cf4 \strokec4 timestamp\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3         \cb1 \
\cb3         \cf5 \strokec5 uint256\cf4 \strokec4  balanceRewardToken \cf7 \strokec7 =\cf4 \strokec4  IERC20\cf7 \strokec7 (\cf4 \strokec4 rewardToken\cf7 \strokec7 ).\cf4 \strokec4 balanceOf\cf7 \strokec7 (\cf5 \strokec5 address\cf7 \strokec7 (\cf9 \strokec9 this\cf7 \strokec7 ));\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 bool\cf4 \strokec4  success \cf7 \strokec7 =\cf4 \strokec4  IERC20\cf7 \strokec7 (\cf4 \strokec4 rewardToken\cf7 \strokec7 ).\cf4 \strokec4 transfer\cf7 \strokec7 (\cf5 \strokec5 address\cf7 \strokec7 (\cf4 \strokec4 dividendTracker\cf7 \strokec7 ),\cf4 \strokec4  balanceRewardToken\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\
\cb3         \cf13 \strokec13 if\cf4 \strokec4  \cf7 \strokec7 (\cf4 \strokec4 success\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3             dividendTracker\cf7 \strokec7 .\cf4 \strokec4 distributeDividends\cf7 \strokec7 (\cf4 \strokec4 balanceRewardToken\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 emit\cf4 \strokec4  SendDividends\cf7 \strokec7 (\cf4 \strokec4 balanceRewardToken\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3         \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  setSwapTokensAtAmount\cf7 \strokec7 (\cf5 \strokec5 uint256\cf4 \strokec4  newAmount\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  onlyOwner\cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf11 \strokec11 require\cf7 \strokec7 (\cf4 \strokec4 newAmount \cf7 \strokec7 >\cf4 \strokec4  totalSupply\cf7 \strokec7 ()\cf4 \strokec4  \cf7 \strokec7 /\cf4 \strokec4  \cf6 \strokec6 100000\cf7 \strokec7 ,\cf4 \strokec4  \cf15 \strokec15 "SwapTokensAtAmount must be greater than 0.001% of total supply"\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3         swapTokensAtAmount \cf7 \strokec7 =\cf4 \strokec4  newAmount\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 emit\cf4 \strokec4  SwapTokensAtAmountUpdated\cf7 \strokec7 (\cf4 \strokec4 newAmount\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 //=======MaxWallet=======//\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3     \cf5 \strokec5 mapping\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  => \cf5 \strokec5 bool\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 private\cf4 \strokec4  _isExcludedFromMaxWalletLimit\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 bool\cf4 \strokec4     \cf8 \strokec8 public\cf4 \strokec4  maxWalletLimitEnabled\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 uint256\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  maxWalletAmount\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  setEnableMaxWalletLimit\cf7 \strokec7 (\cf5 \strokec5 bool\cf4 \strokec4  enable\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  onlyOwner \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf11 \strokec11 require\cf7 \strokec7 (\cf4 \cb1 \strokec4 \
\cb3             enable \cf7 \strokec7 !=\cf4 \strokec4  maxWalletLimitEnabled\cf7 \strokec7 ,\cf4 \strokec4  \cb1 \
\cb3             \cf15 \strokec15 "Max wallet limit is already set to that state"\cf4 \cb1 \strokec4 \
\cb3         \cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3         maxWalletLimitEnabled \cf7 \strokec7 =\cf4 \strokec4  enable\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 emit\cf4 \strokec4  MaxWalletLimitStateChanged\cf7 \strokec7 (\cf4 \strokec4 maxWalletLimitEnabled\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  setMaxWalletAmount\cf7 \strokec7 (\cf5 \strokec5 uint256\cf4 \strokec4  _maxWalletAmount\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  onlyOwner \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\
\cb3         \cf11 \strokec11 require\cf7 \strokec7 (\cf4 \strokec4 _maxWalletAmount \cf7 \strokec7 >=\cf4 \strokec4  \cf7 \strokec7 (\cf4 \strokec4 totalSupply\cf7 \strokec7 ()\cf4 \strokec4  \cf7 \strokec7 /\cf4 \strokec4  \cf7 \strokec7 (\cf6 \strokec6 10\cf4 \strokec4  ** decimals\cf7 \strokec7 ()))\cf4 \strokec4  \cf7 \strokec7 /\cf4 \strokec4  \cf6 \strokec6 100\cf4 \strokec4  \cb1 \
\cb3                 \cf7 \strokec7 &&\cf4 \strokec4  _maxWalletAmount \cf7 \strokec7 <=\cf4 \strokec4  \cf7 \strokec7 (\cf4 \strokec4 totalSupply\cf7 \strokec7 ()\cf4 \strokec4  \cf7 \strokec7 /\cf4 \strokec4  \cf7 \strokec7 (\cf6 \strokec6 10\cf4 \strokec4  ** decimals\cf7 \strokec7 ()))\cf4 \strokec4  \cf7 \strokec7 /\cf4 \strokec4  \cf6 \strokec6 50\cf7 \strokec7 ,\cf4 \strokec4  \cf15 \strokec15 "Max wallet percentage can only be modified between 1% and 2% of total supply"\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\
\cb3         maxWalletAmount \cf7 \strokec7 =\cf4 \strokec4  _maxWalletAmount \cf7 \strokec7 *\cf4 \strokec4  \cf7 \strokec7 (\cf6 \strokec6 10\cf4 \strokec4  ** decimals\cf7 \strokec7 ());\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 emit\cf4 \strokec4  MaxWalletLimitAmountChanged\cf7 \strokec7 (\cf4 \strokec4 maxWalletAmount\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  setExcludeFromMaxWallet\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  account\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 bool\cf4 \strokec4  exclude\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  onlyOwner \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf11 \strokec11 require\cf7 \strokec7 (\cf4 \cb1 \strokec4 \
\cb3             _isExcludedFromMaxWalletLimit\cf7 \strokec7 [\cf4 \strokec4 account\cf7 \strokec7 ]\cf4 \strokec4  \cf7 \strokec7 !=\cf4 \strokec4  exclude\cf7 \strokec7 ,\cf4 \strokec4  \cb1 \
\cb3             \cf15 \strokec15 "Account is already set to that state"\cf4 \cb1 \strokec4 \
\cb3         \cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3         _isExcludedFromMaxWalletLimit\cf7 \strokec7 [\cf4 \strokec4 account\cf7 \strokec7 ]\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  exclude\cf7 \strokec7 ;\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 emit\cf4 \strokec4  ExcludedFromMaxWalletLimit\cf7 \strokec7 (\cf4 \strokec4 account\cf7 \strokec7 ,\cf4 \strokec4  exclude\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  isExcludedFromMaxWalletLimit\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  account\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf10 \strokec10 returns\cf7 \strokec7 (\cf5 \strokec5 bool\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf10 \strokec10 return\cf4 \strokec4  _isExcludedFromMaxWalletLimit\cf7 \strokec7 [\cf4 \strokec4 account\cf7 \strokec7 ];\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 //=======Divivdend Tracker=======//\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3     \cf5 \strokec5 function\cf4 \strokec4  getClaimWait\cf7 \strokec7 ()\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf10 \strokec10 returns\cf7 \strokec7 (\cf5 \strokec5 uint256\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf10 \strokec10 return\cf4 \strokec4  dividendTracker\cf7 \strokec7 .\cf4 \strokec4 claimWait\cf7 \strokec7 ();\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  getTotalDividendsDistributed\cf7 \strokec7 ()\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 uint256\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf10 \strokec10 return\cf4 \strokec4  dividendTracker\cf7 \strokec7 .\cf4 \strokec4 totalDividendsDistributed\cf7 \strokec7 ();\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  withdrawableDividendOf\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  account\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf10 \strokec10 returns\cf7 \strokec7 (\cf5 \strokec5 uint256\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf10 \strokec10 return\cf4 \strokec4  dividendTracker\cf7 \strokec7 .\cf4 \strokec4 withdrawableDividendOf\cf7 \strokec7 (\cf4 \strokec4 account\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  dividendTokenBalanceOf\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  account\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 uint256\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf10 \strokec10 return\cf4 \strokec4  dividendTracker\cf7 \strokec7 .\cf4 \strokec4 balanceOf\cf7 \strokec7 (\cf4 \strokec4 account\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  totalRewardsEarned\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  account\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf5 \strokec5 uint256\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf10 \strokec10 return\cf4 \strokec4  dividendTracker\cf7 \strokec7 .\cf4 \strokec4 accumulativeDividendOf\cf7 \strokec7 (\cf4 \strokec4 account\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  excludeFromDividends\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  account\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  onlyOwner\cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         dividendTracker\cf7 \strokec7 .\cf4 \strokec4 excludeFromDividends\cf7 \strokec7 (\cf4 \strokec4 account\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  getAccountDividendsInfo\cf7 \strokec7 (\cf5 \strokec5 address\cf4 \strokec4  account\cf7 \strokec7 )\cf4 \cb1 \strokec4 \
\cb3         \cf8 \strokec8 external\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf4 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 address\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 int256\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 int256\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 uint256\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 uint256\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 uint256\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 uint256\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 uint256\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf10 \strokec10 return\cf4 \strokec4  dividendTracker\cf7 \strokec7 .\cf4 \strokec4 getAccount\cf7 \strokec7 (\cf4 \strokec4 account\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  getAccountDividendsInfoAtIndex\cf7 \strokec7 (\cf5 \strokec5 uint256\cf4 \strokec4  index\cf7 \strokec7 )\cf4 \cb1 \strokec4 \
\cb3         \cf8 \strokec8 external\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf10 \strokec10 returns\cf4 \strokec4  \cf7 \strokec7 (\cf4 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 address\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 int256\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 int256\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 uint256\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 uint256\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 uint256\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 uint256\cf7 \strokec7 ,\cf4 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 uint256\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf10 \strokec10 return\cf4 \strokec4  dividendTracker\cf7 \strokec7 .\cf4 \strokec4 getAccountAtIndex\cf7 \strokec7 (\cf4 \strokec4 index\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  processDividendTracker\cf7 \strokec7 (\cf5 \strokec5 uint256\cf4 \strokec4  gas\cf7 \strokec7 )\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf7 \strokec7 (\cf5 \strokec5 uint256\cf4 \strokec4  iterations\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint256\cf4 \strokec4  claims\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 uint256\cf4 \strokec4  lastProcessedIndex\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 =\cf4 \strokec4  dividendTracker\cf7 \strokec7 .\cf4 \strokec4 process\cf7 \strokec7 (\cf4 \strokec4 gas\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 emit\cf4 \strokec4  ProcessedDividendTracker\cf7 \strokec7 (\cf4 \strokec4 iterations\cf7 \strokec7 ,\cf4 \strokec4  claims\cf7 \strokec7 ,\cf4 \strokec4  lastProcessedIndex\cf7 \strokec7 ,\cf4 \strokec4  \cf5 \strokec5 false\cf7 \strokec7 ,\cf4 \strokec4  gas\cf7 \strokec7 ,\cf4 \strokec4  \cf11 \strokec11 tx\cf7 \strokec7 .\cf4 \strokec4 origin\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  claim\cf7 \strokec7 ()\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         dividendTracker\cf7 \strokec7 .\cf4 \strokec4 processAccount\cf7 \strokec7 (\cf8 \strokec8 payable\cf7 \strokec7 (\cf11 \strokec11 msg\cf7 \strokec7 .\cf4 \strokec4 sender\cf7 \strokec7 ),\cf4 \strokec4  \cf5 \strokec5 false\cf7 \strokec7 );\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  getLastProcessedIndex\cf7 \strokec7 ()\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf10 \strokec10 returns\cf7 \strokec7 (\cf5 \strokec5 uint256\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf10 \strokec10 return\cf4 \strokec4  dividendTracker\cf7 \strokec7 .\cf4 \strokec4 getLastProcessedIndex\cf7 \strokec7 ();\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 function\cf4 \strokec4  getNumberOfDividendTokenHolders\cf7 \strokec7 ()\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf10 \strokec10 returns\cf7 \strokec7 (\cf5 \strokec5 uint256\cf7 \strokec7 )\cf4 \strokec4  \cf7 \strokec7 \{\cf4 \cb1 \strokec4 \
\cb3         \cf10 \strokec10 return\cf4 \strokec4  dividendTracker\cf7 \strokec7 .\cf4 \strokec4 getNumberOfTokenHolders\cf7 \strokec7 ();\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7 \}\cf4 \cb1 \strokec4 \
\
}